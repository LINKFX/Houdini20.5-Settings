{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "sort", "icon": "MISC/generic", "tags": "tech, topology, points", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Sort"], "extent": [0, 9]}, {"type": "summary", "indent": 0, "text": ["Reorders points and primitives in different ways, including randomly."], "extent": [103, 181]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [181, 196], "body": [{"type": "para", "indent": 0, "text": ["In Houdini, points and primitives have an inherent order, and each point/primitive knows its own ", {"type": "q", "text": ["point number"]}, " or ", {"type": "q", "text": ["primitive number"]}, " (its index within the list of points/primitives). This node lets you change the order of points/primitives based on certain criteria."], "extent": [196, 466]}, {"type": "para", "indent": 0, "text": ["To change the order of vertices within a primitive, use the ", {"scheme": "Node", "value": "/nodes/sop/reverse", "type": "link", "text": ["Reverse SOP"], "fullpath": "/nodes/sop/reverse.html"}, " instead."], "extent": [466, 568]}]}, {"level": 2, "id": "expr", "container": true, "type": "h", "indent": 0, "text": ["Sorting by an arbitrary expression"], "extent": [568, 616], "body": [{"type": "para", "indent": 0, "text": ["Do not use this node to sort ", {"type": "q", "text": ["by expression"]}, " (setting the ", {"type": "ui", "text": ["Point Sort"]}, " parameter to ", {"type": "ui", "text": ["By Expression"]}, "). Instead, do the following:"], "extent": [616, 751]}, {"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Use ", {"scheme": "Node", "value": "/nodes/sop/attribcreate", "type": "link", "text": ["Attribute Create"], "fullpath": "/nodes/sop/attribcreate.html"}, " or ", {"scheme": "Node", "value": "/nodes/sop/attribwrangle", "type": "link", "text": ["Attribute Wrangle"], "fullpath": "/nodes/sop/attribwrangle.html"}, " to set an attribute on each point/primitive with a ", {"type": "q", "text": ["comparison key"]}, " value that can be used to order each element."], "extent": [751, 959]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Use the Sort node to sort ", {"type": "q", "text": ["by attribute"]}, " using the key attribute."], "extent": [959, 1028]}], "container": true}, {"type": "para", "indent": 0, "text": ["This has two advantages over sorting ", {"type": "q", "text": ["by expression"]}, ":"], "extent": [1028, 1083]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can view the attribute contents in the ", {"scheme": null, "value": "/ref/panes/geosheet", "type": "link", "text": ["geometry spreadsheet"], "fullpath": "/ref/panes/geosheet.html"}, " to make sure you are generating the right values."], "extent": [1083, 1222]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["It is usually ", {"type": "em", "text": ["much"]}, " faster, since sorting by attribute can be multi-threaded, but expressions with local variables cannot."], "extent": [1222, 1349]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [1349, 1355], "body": [{"type": "para", "indent": 4, "text": ["The Sort SOP does ", {"type": "em", "text": ["not"]}, " properly sort Vector3/Vector4 values or arrays - it only sorts by a single component. However, because the Sort SOP uses a stable sort, you can wire together multiple Sort nodes to sort by multiple components or attributes."], "extent": [1355, 1609]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 1, "id": "locals", "container": true, "type": "locals_section", "indent": 0, "role": "section", "extent": [1609, 1617], "body": [{"type": "para", "indent": 0, "text": ["This node does not have any special local variables. You can use the ", {"scheme": null, "value": "/network/expressions#globals", "type": "link", "text": ["common local variables"], "fullpath": "/network/expressions.html#globals", "fragment": "#globals"}, " when sorting ", {"type": "q", "text": ["by expression"]}, ". However, see ", {"scheme": null, "value": "#expr", "type": "link", "text": ["sorting by arbitrary expression"], "fullpath": "/nodes/sop/sort.html#expr", "fragment": "#expr"}, " above."], "extent": [1617, 1833]}], "text": "Locals"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1833, 1845], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Point Group"], "extent": [1845, 1859], "body": [{"type": "para", "indent": 4, "text": ["The points to sort.  Only these points will be re-arranged by the point sorting choices."], "extent": [1877, 1971]}], "container": true, "attrs": {"id": "ptgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Point Sort"], "extent": [1971, 1983], "body": [{"type": "para", "indent": 4, "text": ["How to sort the elements."], "extent": [2000, 2031]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Change"], "extent": [2031, 2046], "body": [{"type": "para", "indent": 8, "text": ["Do not change the order (preserve the current order)."], "extent": [2046, 2109]}], "container": true}, {"type": "dt", "indent": 4, "text": ["By Vertex Order (points only)"], "extent": [2109, 2144], "body": [{"type": "para", "indent": 8, "text": ["Sort points to match the order of the vertices on the primitives they belong to."], "extent": [2144, 2234]}, {"type": "para", "indent": 8, "text": ["If you have a curve whose point numbers don\u2019t increase along the curve, this will give the points the proper numbers."], "extent": [2234, 2361]}], "container": true}, {"type": "dt", "indent": 4, "text": ["By X/Y/Z"], "extent": [2361, 2375], "body": [{"type": "para", "indent": 8, "text": ["Sorts by the element\u2019s X, Y, or Z coordinate."], "extent": [2375, 2430]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reverse"], "extent": [2430, 2443], "body": [{"type": "para", "indent": 8, "text": ["Reverses the ", {"type": "em", "text": ["current"]}, " ordering."], "extent": [2443, 2485]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Random"], "extent": [2485, 2497], "body": [{"type": "para", "indent": 8, "text": ["Scrambles the elements into a random order."], "extent": [2497, 2550]}, {"type": "para", "indent": 8, "text": ["NOTE: Does not currently support restriction to a group."], "extent": [2550, 2616]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Shift"], "extent": [2616, 2627], "body": [{"type": "para", "indent": 8, "text": ["Shifts the current element numbers forward by a certain offset. Point numbers at the end of the point list wrap around to the start."], "extent": [2627, 2769]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Proximity to Point"], "extent": [2769, 2793], "body": [{"type": "para", "indent": 8, "text": ["Orders the elements by how close they are to a certain point."], "extent": [2793, 2864]}, {"type": "para", "indent": 8, "text": ["This can be useful for limiting a point cloud to only the N closest points to a target: sort the points by proximity, then delete all but the first N points."], "extent": [2864, 3031]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Along Vector"], "extent": [3031, 3049], "body": [{"type": "para", "indent": 8, "text": ["Orders the elements by their position along a certain line in 3D space. This is similar to ", {"type": "q", "text": ["By X/Y/Z"]}, " but lets you specify an arbitrary line instead of one of the cardinal axes."], "extent": [3049, 3236]}], "container": true}, {"type": "dt", "indent": 4, "text": ["By Expression"], "extent": [3236, 3255], "body": [{"type": "para", "indent": 8, "text": ["This option lets you sort elements using ", {"type": "q", "text": ["key values"]}, " generated by an expression. However, it is ", {"scheme": null, "value": "#expr", "type": "link", "text": ["faster and more convenient to use attributes"], "fullpath": "/nodes/sop/sort.html#expr", "fragment": "#expr"}, "."], "extent": [3255, 3415]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Spatial Locality"], "extent": [3415, 3437], "body": [{"type": "para", "indent": 8, "text": ["Changes the order so elements that are near to each other in 3D space have similar numbers."], "extent": [3437, 3538]}], "container": true}, {"type": "dt", "indent": 4, "text": ["By Attribute"], "extent": [3538, 3556], "body": [{"type": "para", "indent": 8, "text": ["Uses the value of an attribute as a ", {"type": "q", "text": ["key value"]}, " to sort by. For Vector3/Vector4 attributes, the node can only sort by a single component at a time. However, because the Sort SOP uses a stable sort, you can wire together multiple Sort nodes to sort by multiple components, or multiple attributes."], "extent": [3556, 3861]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "ptsort"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Seed"], "extent": [3861, 3867], "body": [{"type": "para", "indent": 4, "text": ["When the sort method is ", {"type": "q", "text": ["Random"]}, ", the seed to use for the random number generator. Different seeds will generate different random orders."], "extent": [3867, 4010]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Offset"], "extent": [4010, 4018], "body": [{"type": "para", "indent": 4, "text": ["When the sort method is ", {"type": "q", "text": ["Shift"]}, ", the number of places to shift the element numbers forward."], "extent": [4018, 4115]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Point"], "extent": [4115, 4122], "body": [{"type": "para", "indent": 4, "text": ["When the sort method is ", {"type": "q", "text": ["Proximity"]}, ", order the elements by how close they are to this point."], "extent": [4122, 4220]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Vector Object"], "extent": [4220, 4235], "body": [{"type": "para", "indent": 4, "text": ["When the sort method is ", {"type": "q", "text": ["Along Vector"]}, ", if you enter a path to an Object node here, the Sort node will use that objects translate as the vector to sort along."], "extent": [4235, 4399]}, {"type": "para", "indent": 4, "text": ["This lets you sort along a vector from the origin to the object\u2019s current 3D position."], "extent": [4399, 4491]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Vector"], "extent": [4491, 4499], "body": [{"type": "para", "indent": 4, "text": ["When the sort method is ", {"type": "q", "text": ["Along Vector"]}, ", the vector to use for sorting. This vector is signed, so a value of ", {"type": "code", "text": ["0, 1, 0"]}, " is the equivalent of sorting By Y, while ", {"type": "code", "text": ["0, -1, 0"]}, " is the reverse."], "extent": [4499, 4690]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expression"], "extent": [4690, 4702], "body": [{"type": "para", "indent": 4, "text": ["When the sort method is ", {"type": "q", "text": ["By Expression"]}, ", this is the per-element expression to use to generate key values. However, it is ", {"scheme": null, "value": "#expr", "type": "link", "text": ["faster and more convenient to use attributes"], "fullpath": "/nodes/sop/sort.html#expr", "fragment": "#expr"}, "."], "extent": [4702, 4883]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute"], "extent": [4883, 4894], "body": [{"type": "para", "indent": 4, "text": ["When the sort method is ", {"type": "q", "text": ["By Attribute"]}, ", the name of the attribute to use a the sorting key."], "extent": [4894, 4991]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Component"], "extent": [4991, 5002], "body": [{"type": "para", "indent": 4, "text": ["When the sort method is ", {"type": "q", "text": ["By Attribute"]}, ", which component of a compound (vector/matrix) value to use as the sorting key. The Sort node can only sort by a single component at a time. However, because the Sort SOP uses a stable sort, you can wire together multiple Sort nodes to sort by multiple components, or multiple attributes."], "extent": [5002, 5335]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reverse Point Sort"], "extent": [5335, 5355], "body": [{"type": "para", "indent": 4, "text": ["Reverses the sorted ordering computed by the controls above. For example, if you set the sort method to ", {"type": "q", "text": ["By X"]}, " and turn this on, points are sorted by ", {"type": "em", "text": ["decreasing"]}, " X positions."], "extent": [5378, 5559]}], "container": true, "attrs": {"id": "pointreverse"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Group"], "extent": [5559, 5576], "body": [{"type": "para", "indent": 4, "text": ["The primitives to restrict the sort to.  Only these primitives will be re-arranged by the primitive sorting operation."], "extent": [5596, 5720]}], "container": true, "attrs": {"id": "primgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Sort"], "extent": [5720, 5736], "body": [{"type": "para", "indent": 4, "text": ["See the help for ", {"type": "ui", "text": ["Point sort"]}, " above."], "extent": [5755, 5799]}], "container": true, "attrs": {"id": "primsort"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reverse Primitive Sort"], "extent": [5799, 5823], "body": [{"type": "para", "indent": 4, "text": ["Reverses the sorted ordering computed by the controls above. For example, if you set the sort method to ", {"type": "q", "text": ["By X"]}, " and turn this on, primitives are sorted by ", {"type": "em", "text": ["decreasing"]}, " X positions."], "extent": [5845, 6030]}], "container": true, "attrs": {"id": "primreverse"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Optimize Internal Vertex Order"], "extent": [6030, 6062], "body": [{"type": "para", "indent": 4, "text": ["Sort vertices according to the primitive number and vertex order in each primitive.  This will affect the linear vertex index used by VEX functions like ", {"scheme": null, "value": "/vex/functions/vertexindex", "type": "link", "text": ["vertexindex"], "fullpath": "/vex/functions/vertexindex.html"}, ", ", {"scheme": null, "value": "/vex/functions/vertexprim", "type": "link", "text": ["vertexprim"], "fullpath": "/vex/functions/vertexprim.html"}, ", and ", {"scheme": null, "value": "/vex/functions/vertexprimindex", "type": "link", "text": ["vertexprimindex"], "fullpath": "/vex/functions/vertexprimindex.html"}, "."], "extent": [6088, 6382]}], "container": true, "attrs": {"id": "vertexprimorder"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}], "title": ["Sort"], "summary": ["Reorders points and primitives in different ways, including randomly."]}