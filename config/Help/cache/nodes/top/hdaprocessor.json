{"type": "root", "attrs": {"type": "node", "context": "top", "internal": "hdaprocessor", "icon": "TOP/hdaprocessor", "since": "17.5", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["HDA Processor"], "extent": [97, 115]}, {"type": "summary", "indent": 0, "text": ["Creates work items that cook a digital asset"], "extent": [115, 168]}, {"type": "para", "indent": 0, "text": ["This node generates work items that cook an HDA using ", {"type": "code", "text": ["hython"]}, ". "], "extent": [168, 234]}, {"type": "para", "indent": 0, "text": ["You can specify the values of the HDA\u2019s parameters in the ", {"type": "ui", "text": ["HDA Parameters"]}, " tab of the node, which are then applied as attributes on the node\u2019s work items and used in the job environment to configure the HDA before cooking."], "extent": [234, 460]}, {"type": "para", "indent": 0, "text": ["The ", {"type": "ui", "text": ["HDA Processor"]}, " node currently supports Object, SOP, COP2, and LOP-type HDAs."], "extent": [460, 545]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [545, 550], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["The ", {"type": "code", "text": ["$HH/help/files/pdg_examples/top_roaderbuilder"]}, " example shows how you can use this node to write out geometry defined in a digital asset."], "extent": [550, 698]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["The ", {"type": "code", "text": ["$HH/help/files/pdg_examples/top_feedbackhda"]}, " example shows how you can use this node inside of a ", {"scheme": null, "value": "/tops/looping", "type": "link", "text": ["feedback loop"], "fullpath": "/tops/looping.html"}, "."], "extent": [698, 838]}], "container": true}], "container": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "top_attributes", "container": true, "type": "top_attributes_section", "indent": 0, "role": "section", "extent": [838, 854], "body": [{"type": "para", "indent": 0, "text": ["This node creates attributes on work items for all spare parms added\nto the ", {"type": "ui", "text": ["HDA Parameters"]}, " folder on the node. "], "extent": [854, 971]}, {"type": "para", "indent": 0, "text": ["Additionally, it also creates the following built-in attributes:"], "extent": [971, 1037]}, {"type": "top_attributes_item_group", "body": [{"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["batchmode"]}], "role": "item", "extent": [1037, 1052], "body": [{"type": "para", "indent": 4, "text": ["Determines the ", {"scheme": null, "value": "#bathcmode", "type": "link", "text": ["Batch Mode"], "fullpath": "/nodes/top/hdaprocessor.html#bathcmode", "fragment": "#bathcmode"}, " setting."], "extent": [1072, 1124]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["0 = Off"], "extent": [1124, 1138]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["1 = All Items in One Batch"], "extent": [1138, 1171]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["2 = Custom Batch Size"], "extent": [1171, 1200]}], "container": true}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["connectiontimeout"]}], "role": "item", "extent": [1200, 1223], "body": [{"type": "para", "indent": 4, "text": ["The connection timeout limit (ms) when using the HDA Processor service."], "extent": [1243, 1320]}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["cookwhen"]}], "role": "item", "extent": [1320, 1334], "body": [{"type": "para", "indent": 4, "text": ["Determines the ", {"scheme": null, "value": "#cookwhen", "type": "link", "text": ["Cook Batch When"], "fullpath": "/nodes/top/hdaprocessor.html#cookwhen", "fragment": "#cookwhen"}, " setting."], "extent": [1354, 1410]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["0 = All Items are Ready"], "extent": [1410, 1440]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["1 = First Item is Ready"], "extent": [1440, 1471]}], "container": true}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["hda"]}], "role": "item", "extent": [1471, 1480], "body": [{"type": "para", "indent": 4, "text": ["The path to the digital asset that is cooked by the work item\u2019s job."], "extent": [1499, 1573]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["operatortype"]}], "role": "item", "extent": [1573, 1591], "body": [{"type": "para", "indent": 4, "text": ["The operator type within the digital asset. "], "extent": [1610, 1660]}, {"type": "para", "indent": 4, "text": ["If you do ", {"type": "em", "text": ["not"]}, " specify an operator type using the ", {"scheme": null, "value": "#optypeselection", "type": "link", "text": ["Operator Type"], "fullpath": "/nodes/top/hdaprocessor.html#optypeselection", "fragment": "#optypeselection"}, " parameter, then this attribute is set to the empty string and the work item will use the first operator in the ", {"type": "code", "text": [".hda"]}, "."], "extent": [1660, 1868]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["createfileinput"]}], "role": "item", "extent": [1868, 1889], "body": [{"type": "para", "indent": 4, "text": ["Determines the ", {"scheme": null, "value": "#createfileinput", "type": "link", "text": ["Create File Inputs"], "fullpath": "/nodes/top/hdaprocessor.html#createfileinput", "fragment": "#createfileinput"}, " setting."], "extent": [1909, 1975]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["0 = Do not create file inputs"], "extent": [1975, 2011]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["1 = Create file inputs"], "extent": [2011, 2041]}], "container": true}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["missinginput"]}], "role": "item", "extent": [2041, 2059], "body": [{"type": "para", "indent": 4, "text": ["Determines the ", {"scheme": null, "value": "#missinginput", "type": "link", "text": ["Missing Input"], "fullpath": "/nodes/top/hdaprocessor.html#missinginput", "fragment": "#missinginput"}, " setting."], "extent": [2079, 2137]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["0 = Raise Error"], "extent": [2137, 2159]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["2 = Ignore"], "extent": [2159, 2177]}], "container": true}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["fileinputs"]}], "role": "item", "extent": [2177, 2193], "body": [{"type": "para", "indent": 4, "text": ["Specifies the number of file inputs that are input to the HDA."], "extent": [2213, 2281]}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["writeoutput"]}], "role": "item", "extent": [2281, 2298], "body": [{"type": "para", "indent": 4, "text": ["Determines the ", {"scheme": null, "value": "#writeoutput", "type": "link", "text": ["Write Outputs"], "fullpath": "/nodes/top/hdaprocessor.html#writeoutput", "fragment": "#writeoutput"}, " setting."], "extent": [2318, 2375]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["0 = Do not write outputs"], "extent": [2375, 2406]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["1 = Write outputs"], "extent": [2406, 2431]}], "container": true}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["dumpdebug"]}], "role": "item", "extent": [2431, 2446], "body": [{"type": "para", "indent": 4, "text": ["Determines whether or not to save a debug ", {"type": "code", "text": [".hip"]}, " file."], "extent": [2466, 2525]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["0 = Do not save .hip file"], "extent": [2525, 2557]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["1 = Save .hip file"], "extent": [2557, 2583]}], "container": true}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["debughipfile"]}], "role": "item", "extent": [2583, 2601], "body": [{"type": "para", "indent": 4, "text": ["If ", {"type": "code", "text": ["dumpdebug"]}, " is set, this attrbiute determines the path that the debug .hip file will be saved to"], "extent": [2620, 2725]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["dumpperf"]}], "role": "item", "extent": [2725, 2739], "body": [{"type": "para", "indent": 4, "text": ["Determines whether or not the performance monitor should be run while cooking the .hda."], "extent": [2759, 2852]}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["perffile"]}], "role": "item", "extent": [2852, 2866], "body": [{"type": "para", "indent": 4, "text": ["If ", {"type": "code", "text": ["dumpperf"]}, " is enabled, this specifies the path that the performance monitor output is saved to. If this attribute is empty, performance monitor output goes to the work item\u2019s log instead."], "extent": [2885, 3081]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["debugoutputs"]}], "role": "item", "extent": [3081, 3099], "body": [{"type": "para", "indent": 4, "text": ["Determines whether debug output files like the performance monitor or saved scene should be reported as work item outputs."], "extent": [3118, 3246]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["inputpath"]}], "role": "item", "extent": [3246, 3261], "body": [{"type": "para", "indent": 4, "text": ["A list of paths to the file inputs that are input to the HDA."], "extent": [3280, 3347]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["outputfiles"]}], "role": "item", "extent": [3347, 3364], "body": [{"type": "para", "indent": 4, "text": ["Specifies the number of output files that are written from the HDA."], "extent": [3384, 3457]}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["hdasopname"]}], "role": "item", "extent": [3457, 3473], "body": [{"type": "para", "indent": 4, "text": ["When cooking an Object-level HDA, this specifies the name of the SOP that is the source of the output file(s) to write out. "], "extent": [3492, 3622]}, {"type": "para", "indent": 4, "text": ["If this empty, then the ", {"type": "ui", "text": ["HDA Processor"]}, " job attempts to find a valid node to output and issue a warning in the job log."], "extent": [3622, 3749]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["outputpath"]}], "role": "item", "extent": [3749, 3765], "body": [{"type": "para", "indent": 4, "text": ["A list of paths that specify the files to be written out."], "extent": [3784, 3847]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["outputtag"]}], "role": "item", "extent": [3847, 3862], "body": [{"type": "para", "indent": 4, "text": ["A list of file tags that specify the result tag for each output file."], "extent": [3881, 3956]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["hdaparms_floats"]}], "role": "item", "extent": [3956, 3977], "body": [{"type": "para", "indent": 4, "text": ["A list of names for all the float attributes that specify an HDA Parameter float value."], "extent": [3996, 4089]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["hdaparms_ints"]}], "role": "item", "extent": [4089, 4108], "body": [{"type": "para", "indent": 4, "text": ["A list of names for all the integer attributes that specify an HDA Parameter integer value."], "extent": [4127, 4224]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["hdaparms_strings"]}], "role": "item", "extent": [4224, 4246], "body": [{"type": "para", "indent": 4, "text": ["A list of names for all the string attributes that specify an HDA Parameter string value."], "extent": [4265, 4360]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["hdaparms_buttons"]}], "role": "item", "extent": [4360, 4382], "body": [{"type": "para", "indent": 4, "text": ["A list of names for all the integer attributes that specify an HDA Parameter button value. "], "extent": [4401, 4498]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [4498, 4508], "body": [{"type": "para", "indent": 8, "text": ["Buttons are converted into toggles within the ", {"type": "ui", "text": ["HDA Parameters"]}, " tab. When a toggle is ", {"type": "em", "text": ["on"]}, ", it means that the ", {"type": "ui", "text": ["HDA Processor"]}, " will ", {"type": "em", "text": ["press the button"]}, " before cooking."], "extent": [4508, 4686]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"type": "string"}}], "container": true, "role": "item_group"}], "text": "Top_attributes"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [4686, 4698], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Generation"], "extent": [4698, 4716], "body": [{"level": 4, "type": "sep", "indent": 0, "text": [" Asset "], "extent": [4716, 4733], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Template Node"], "extent": [4733, 4752], "body": [{"type": "para", "indent": 8, "text": ["Selects an instance of a digital asset within the current Houdini session. "], "extent": [4779, 4864]}, {"type": "para", "indent": 8, "text": ["All the template node\u2019s non-default parameter values are applied to the ", {"type": "ui", "text": ["HDA Processor\u2019s"]}, " ", {"scheme": null, "value": "#hdaparms", "type": "link", "text": ["HDA Parameters"], "fullpath": "/nodes/top/hdaprocessor.html#hdaparms", "fragment": "#hdaparms"}, "."], "extent": [4864, 4993]}], "container": true, "attrs": {"id": "templatenode"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["HDA File"], "extent": [4993, 5007], "body": [{"type": "para", "indent": 8, "text": ["Specifies the path of the HDA to cook."], "extent": [5031, 5079]}, {"type": "para", "indent": 8, "text": ["This path can be absolute or it can be relative to ", {"type": "code", "text": ["HOUDINI_PATH"]}, ". For example, if an asset like ", {"type": "code", "text": ["myasset.hda"]}, " is in a sub-directory ", {"type": "code", "text": ["otls"]}, " in ", {"type": "code", "text": ["hou.homeHoudiniDirectory()"]}, ", you can specify that HDA\u2019s path as ", {"type": "code", "text": ["otls/myasset.hda"]}, "."], "extent": [5079, 5316]}, {"type": "para", "indent": 8, "text": ["Any HDAs that are added to this node\u2019s ", {"scheme": null, "value": "#filedepend", "type": "link", "text": ["File Dependencies"], "fullpath": "/nodes/top/hdaprocessor.html#filedepend", "fragment": "#filedepend"}, " are automatically copied to the ", {"type": "code", "text": ["$PDG_TEMP/otls"]}, " directory. Any nested HDAs that are required by the HDA being cooked and are ", {"type": "em", "text": ["not"]}, " otherwise available in the user\u2019s ", {"type": "code", "text": ["HOUDINI_PATH"]}, " also need to be added as a ", {"type": "ui", "text": ["File Dependency"]}, "."], "extent": [5316, 5625]}], "container": true, "attrs": {"id": "inputfile"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Add HDA Parameters"], "extent": [5625, 5649], "body": [{"type": "para", "indent": 8, "text": ["This menu controls how HDA Parameters and their values are added to the work item as attributes. The HDA Parameter attributes on the work item are used to set the node\u2019s parameter values during the cook. The names of HDA Parameters are specified in four string attributes: ", {"type": "code", "text": ["hdaparms_floats"]}, ", ", {"type": "code", "text": ["hdaparms_ints"]}, ", ", {"type": "code", "text": ["hdaparms_strings"]}, ", and ", {"type": "code", "text": ["hdaparms_buttons"]}, ". For any parameter names specified in these attributes, there must be a corresponding attribute with the same name which specifies the values of the parameter."], "extent": [5675, 6196]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Automatically"], "extent": [6196, 6219], "body": [{"type": "para", "indent": 12, "text": ["The node will automatically add the necessary work item attributes by inspecting the parameters within the HDA Parameters tab."], "extent": [6219, 6359]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Manually"], "extent": [6359, 6377], "body": [{"type": "para", "indent": 12, "text": ["When this option is selected, the necessary HDA Parameter work item attributes must be manually added by an upstream node. This option is useful when the HDA is procedurally specified and is therefore cooking different HDAs that have different parameters."], "extent": [6377, 6649]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "addhdaparms"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Specify Operator Using"], "extent": [6649, 6677], "body": [{"type": "para", "indent": 8, "text": ["Determines how the operator type should be specified."], "extent": [6709, 6772]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["First Definition in Asset"], "extent": [6772, 6807], "body": [{"type": "para", "indent": 12, "text": ["The operator is chosen automatically, using the first definition in the asset."], "extent": [6807, 6899]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom String"], "extent": [6899, 6922], "body": [{"type": "para", "indent": 12, "text": ["The operator type is set using a custom string."], "extent": [6922, 6983]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "operatorselection"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Operator Type"], "extent": [6983, 7002], "body": [{"type": "para", "indent": 8, "text": ["The name of the operator type to select from within the digital asset. If the operator type is invalid or unset, the ", {"type": "ui", "text": ["HDA Processor"]}, " will pick the first type it finds when cooking the asset."], "extent": [7029, 7231]}, {"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Specify Operator Using"]}, " is set to ", {"type": "ui", "text": ["Custom String"]}, "."], "extent": [7231, 7334]}], "container": true, "attrs": {"id": "operatortype"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Update HDA Parameters"], "extent": [7334, 7361], "body": [{"type": "para", "indent": 8, "text": ["Updates the parameters listed in the ", {"type": "ui", "text": ["HDA Parameters"]}, " tab."], "extent": [7390, 7460]}], "container": true, "attrs": {"id": "updateHDAParms"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Filter HDA Parameters"], "extent": [7460, 7487], "body": [{"type": "para", "indent": 8, "text": ["Opens the ", {"type": "ui", "text": ["Filter HDA Parameters"]}, " window."], "extent": [7513, 7566]}, {"type": "para", "indent": 8, "text": ["You can use this window to configure which parameters from the asset should be included in the ", {"scheme": null, "value": "#hdaparms", "type": "link", "text": ["HDA Parameters"], "fullpath": "/nodes/top/hdaprocessor.html#hdaparms", "fragment": "#hdaparms"}, " tab. Any parameters that are included in ", {"type": "ui", "text": ["HDA Parameters"]}, " will have their values set when the ", {"type": "ui", "text": ["HDA Processor"]}, " cooks the HDA."], "extent": [7566, 7826]}], "container": true, "attrs": {"id": "filterparms"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 4, "type": "sep", "indent": 0, "text": [" Work Items "], "extent": [7826, 7847], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Generate When"], "extent": [16, 31], "body": [{"type": "para", "indent": 4, "text": ["Determines when this node will generate work items. You should generally leave this set to ", {"type": "q", "text": ["Automatic"]}, " unless you know the node requires a specific generation mode, or that the work items need to be generated dynamically."], "extent": [64, 291]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Upstream Items are Generated"], "extent": [291, 329], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have generated their work items."], "extent": [329, 437]}], "container": true}, {"type": "dt", "indent": 4, "text": ["All Upstream Items are Cooked"], "extent": [437, 472], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have cooked their work items."], "extent": [472, 577]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Each Upstream Item is Cooked"], "extent": [577, 611], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items each time a work item in an input node is cooked."], "extent": [611, 708]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [708, 723], "body": [{"type": "para", "indent": 11, "text": ["The generation mode is selected based on the generation mode of the input nodes. If any of the input nodes are generating work items when their inputs cook, this node will be set to ", {"type": "ui", "text": ["Each Upstream Item is Cooked"]}, ". Otherwise, it will be set to ", {"type": "ui", "text": ["All Upstream Items are Generated"]}, "."], "extent": [723, 1018]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemgeneration"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cache Mode"], "extent": [1270, 1282], "body": [{"type": "para", "indent": 4, "text": ["Determines how the processor node handles work items that report expected file results."], "extent": [1306, 1399]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [1399, 1414], "body": [{"type": "para", "indent": 8, "text": ["If the expected result file exists on disk, the work item is marked as\n        cooked without being scheduled. If the file ", {"type": "em", "text": ["does not"]}, " exist on disk, the work item is scheduled as normal. If upstream work item dependencies write out new\n        files during a cook, the cache files on work items in this node will\n        also be marked as out-of-date."], "extent": [1414, 1775]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic (Ignore Upstream)"], "extent": [1775, 1808], "body": [{"type": "para", "indent": 8, "text": ["The same as ", {"type": "ui", "text": ["Automatic"]}, ", except upstream file writes ", {"type": "em", "text": ["do not"]}, " invalidate\n        cache files on work items in this node and this node will only check output files for its own work items."], "extent": [1808, 2006]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Read Files"], "extent": [2006, 2022], "body": [{"type": "para", "indent": 8, "text": ["If the expected result file exists on disk, the work item is marked as cooked without being scheduled. Otherwise the work item is marked as failed."], "extent": [2022, 2179]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Write Files"], "extent": [2179, 2196], "body": [{"type": "para", "indent": 8, "text": ["Work items are always scheduled and the expected result file is ignored even if it exists on disk."], "extent": [2196, 2304]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_cachemode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cook Type"], "extent": [2304, 2315], "body": [{"type": "para", "indent": 4, "text": ["Determines how work items in the node should cook, e.g. if they should run in process, out of process, or using services."], "extent": [2338, 2465]}], "container": true, "attrs": {"id": "pdg_cooktype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Service Name"], "extent": [2948, 2962], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Cook Type"]}, " is set to the ", {"type": "ui", "text": ["Service"]}, ", this parameter is used to specify the name of the service. For more information on using services, see the ", {"scheme": null, "value": "/tops/services", "type": "link", "text": ["PDG Service Manager"], "fullpath": "/tops/services.html"}, " documentation."], "extent": [2988, 3198]}], "container": true, "attrs": {"id": "pdg_servicename"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Delete HDA Instance after Cooking:\n    #id: inprocesscleanup"], "extent": [8042, 8108]}, {"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Cook Type"]}, " is set to ", {"type": "ui", "text": ["In Process"]}, ", this parameter determines whether or not work items should clean up instances of the .hda that they create while cooking. If this parameter is enabled, each work item will create and destroy an instance of the HDA when it cooks. Otherwise, if the parameter is disabled the HDA instances will not be deleted after cooking. Additionally, work items will attempt to reuse existing instances when possible."], "extent": [8108, 8561]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Batch Mode"], "extent": [8561, 8577], "body": [{"type": "para", "indent": 8, "text": ["Determines how batch jobs are submitted by the node."], "extent": [8602, 8664]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Off"], "extent": [8664, 8677], "body": [{"type": "para", "indent": 11, "text": ["No batching is performed. Each work item is submitted as its own individual job."], "extent": [8677, 8770]}], "container": true}, {"type": "dt", "indent": 8, "text": ["All Items in One Batch"], "extent": [8770, 8803], "body": [{"type": "para", "indent": 11, "text": ["All work items are submitted as a single batch job and take place in a single ", {"type": "code", "text": ["Hython"]}, " session. "], "extent": [8803, 8912]}, {"type": "para", "indent": 11, "text": ["This option can significantly increase the speed at which the node finishes cooking, especially if the HDA has a relatively quick cooking time such that the time to start up a ", {"type": "code", "text": ["Hython"]}, " process is longer than the time it takes to cook the HDA."], "extent": [8912, 9167]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom Batch Size"], "extent": [9167, 9194], "body": [{"type": "para", "indent": 11, "text": ["Work items are submitted as batch jobs that are the size specified by the ", {"type": "ui", "text": ["Batch Size"]}, " parameter."], "extent": [9194, 9306]}, {"type": "para", "indent": 11, "text": ["This option can significantly increase the performance of the node since it allows for various optimizations to be performed. For example, like only having to instantiate the HDA once per batch job."], "extent": [9306, 9517]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "batchmodes"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Batch Size"], "extent": [9517, 9533], "body": [{"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Batch Mode"]}, " is set to ", {"type": "ui", "text": ["Custom Batch Size"]}, "."], "extent": [9558, 9653]}, {"type": "para", "indent": 8, "text": ["Specifies the size of each batch. If there is underflow in the last batch, then the size of the last batch is the remaining work items."], "extent": [9653, 9798]}], "container": true, "attrs": {"id": "batchcount"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Cook Batch When"], "extent": [9798, 9819], "body": [{"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Batch Mode"]}, " is ", {"type": "em", "text": ["not"]}, " set to ", {"type": "ui", "text": ["Off"]}, "."], "extent": [9842, 9929]}, {"type": "para", "indent": 8, "text": ["Determines when batches of work items are scheduled. "], "extent": [9929, 9992]}, {"type": "para", "indent": 8, "text": ["By default, the batch is scheduled once the dependencies for all work items are cooked. However, it is also possible to schedule the batch as soon as the first work item can run."], "extent": [9992, 10180]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["All Items are Ready"], "extent": [10180, 10209], "body": [{"type": "para", "indent": 11, "text": ["The batch is only scheduled once all dependencies on all work items in the batch are satisfied."], "extent": [10209, 10317]}], "container": true}, {"type": "dt", "indent": 8, "text": ["First Item is Ready"], "extent": [10317, 10346], "body": [{"type": "para", "indent": 11, "text": ["The batch is scheduled as soon as the dependencies for its first work item are ready. The HDA Processor wrapper script used by PDG communicates back to PDG as the job is running to check the status of the dependencies before cooking each work item in the batch. This incurs slightly more network overhead, and requires ongoing communication between the job and PDG."], "extent": [10346, 10724]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "cookwhen"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 4, "type": "sep", "indent": 0, "text": [" Asset Inputs "], "extent": [10724, 10747], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Create File Inputs"], "extent": [10747, 10772], "body": [{"type": "para", "indent": 8, "text": ["When on, one or more file nodes are instantiated and wired as inputs to the asset. You can use this to chain multiple ", {"type": "ui", "text": ["HDA Processor"]}, " nodes together more easily."], "extent": [10802, 10975]}, {"type": "para", "indent": 8, "text": ["When using this parameter, the HDA type must be able to support file inputs. For example, Object-level HDAs would ", {"type": "em", "text": ["not"]}, " work with this parameter."], "extent": [10975, 11130]}], "container": true, "attrs": {"id": "createfileinput"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Input File Source"], "extent": [11130, 11153], "body": [{"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Create File Inputs"]}, " is ", {"type": "em", "text": ["on"]}, "."], "extent": [11179, 11258]}, {"type": "para", "indent": 8, "text": ["Determines the source of the input files."], "extent": [11258, 11309]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Upstream Output Files"], "extent": [11309, 11340], "body": [{"type": "para", "indent": 11, "text": ["The upstream output files with the tag specified by the ", {"type": "ui", "text": ["File Tag"]}, " parameter are used as inputs to the HDA. "], "extent": [11340, 11463]}, {"type": "para", "indent": 11, "text": ["This option is particularly useful when the number of inputs vary."], "extent": [11463, 11542]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom File Paths"], "extent": [11542, 11569], "body": [{"type": "para", "indent": 11, "text": ["The files you specify with the ", {"type": "ui", "text": ["Number of Inputs"]}, " multi-parm are used as inputs to the HDA."], "extent": [11569, 11675]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "inputsource"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Missing Input"], "extent": [11675, 11694], "body": [{"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Create File Inputs"]}, " is ", {"type": "em", "text": ["on"]}, "."], "extent": [11721, 11800]}, {"type": "para", "indent": 8, "text": ["Determines how ", {"type": "ui", "text": ["HDA Processor"]}, " behaves when one or more of its inputs are missing."], "extent": [11800, 11894]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Raise Error"], "extent": [11894, 11915], "body": [{"type": "para", "indent": 12, "text": ["If an input is missing on an input ", {"type": "ui", "text": ["File"]}, " node, then the ", {"type": "ui", "text": ["File"]}, " node will error out and cause the cook to fail."], "extent": [11915, 12044]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Ignore"], "extent": [12044, 12060], "body": [{"type": "para", "indent": 12, "text": ["If an input file is missing from disk, the ", {"type": "ui", "text": ["File"]}, " nodes are set to produce No Geometry and no error is be raised."], "extent": [12060, 12189]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "missinginput"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["File Tag"], "extent": [12189, 12203], "body": [{"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Create File Inputs"]}, " is ", {"type": "em", "text": ["on"]}, "."], "extent": [12230, 12309]}, {"type": "para", "indent": 8, "text": ["Specifies the file tag of the upstream output files to use."], "extent": [12309, 12378]}], "container": true, "attrs": {"id": "inputfiletag"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Number of Inputs"], "extent": [12378, 12400], "body": [{"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Input File Source"]}, " is ", {"type": "ui", "text": ["Custom File Paths"]}, "."], "extent": [12425, 12520]}, {"type": "para", "indent": 8, "text": ["Specifies the number of input file nodes to create."], "extent": [12520, 12581]}], "container": true, "attrs": {"id": "fileinputs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Input File #"], "extent": [12581, 12599], "body": [{"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Input File Source"]}, " is ", {"type": "ui", "text": ["Custom File Paths"]}, "."], "extent": [12624, 12719]}, {"type": "para", "indent": 8, "text": ["Specifies the path to the input file that will be loaded in by the created ", {"type": "ui", "text": ["File"]}, " node."], "extent": [12719, 12818]}], "container": true, "attrs": {"id": "customfile"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 4, "type": "sep", "indent": 0, "text": [" Asset Outputs "], "extent": [12818, 12842], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["HDA Type"], "extent": [12842, 12857], "body": [{"type": "para", "indent": 8, "text": ["Identifies the type of asset you are working with: Object, Sop, Lop, or Cop2."], "extent": [12879, 12966]}, {"type": "para", "indent": 8, "text": [{"type": "ui", "text": ["HDA Processor"]}, " automatically sets the ", {"type": "ui", "text": ["HDA Type"]}, " based on the type of HDA you selected and deactivates any ", {"type": "ui", "text": ["Asset Output"]}, " parameters that are not required for the asset type. "], "extent": [12966, 13158]}], "container": true, "attrs": {"id": "hdatype"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Write Outputs"], "extent": [13158, 13177], "body": [{"type": "para", "indent": 8, "text": ["When on, ", {"type": "ui", "text": ["HDA Processor"]}, " outputs geometry to disk from the display node in the asset."], "extent": [13203, 13300]}, {"type": "para", "indent": 8, "text": ["If your asset contains a COP network or a ROP network, then it would be useful to turn ", {"type": "em", "text": ["off"]}, " this parameter."], "extent": [13300, 13418]}], "container": true, "attrs": {"id": "writeoutput"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Sop Path"], "extent": [13418, 13432], "body": [{"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["HDA Type"]}, " is ", {"type": "ui", "text": ["Auto"]}, " or ", {"type": "ui", "text": ["Object"]}, "."], "extent": [13457, 13544]}, {"type": "para", "indent": 8, "text": ["Specifies the operator path or SOP name for the geometry that ", {"type": "ui", "text": ["HDA Processor"]}, " will output. "], "extent": [13544, 13647]}, {"type": "para", "indent": 8, "text": ["We recommend that you use an operator path specified relative to the top-level node of the HDA. For example, if you have an Object-level asset with a geometry node inside it named ", {"type": "code", "text": ["geometry_to_export"]}, ", and you want to write out the geometry of that node to a file, then you should specify the SOP path as ", {"type": "code", "text": ["./geometry_to_export"]}, "."], "extent": [13647, 13985]}], "container": true, "attrs": {"id": "hdasopname"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Number of Outputs"], "extent": [13985, 14008], "body": [{"type": "para", "indent": 8, "text": ["Specifies the number of outputs. SOPs can have more than 1 output."], "extent": [14036, 14112]}], "container": true, "attrs": {"id": "numberoutputs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Output File Name #"], "extent": [14112, 14136], "body": [{"type": "para", "indent": 8, "text": ["Specifies the name of the output file."], "extent": [14161, 14209]}], "container": true, "attrs": {"id": "outputfile"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Output Tag #"], "extent": [14209, 14227], "body": [{"type": "para", "indent": 8, "text": ["Specifies the result tag assigned to the result file."], "extent": [14251, 14314]}], "container": true, "attrs": {"id": "outputtag"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 4, "type": "sep", "indent": 0, "text": [" Debugging "], "extent": [14314, 14334], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Enable Performance Monitor Logging"], "extent": [14334, 14374], "body": [{"type": "para", "indent": 8, "text": ["When on, the performance monitor is started when the .hda begins cooking, and stopped when the cook completes. The performance monitor stats are logged to the work item output or to a file on disk, depending on whether ", {"type": "ui", "text": ["Performance File"]}, " is enabled."], "extent": [14402, 14663]}], "container": true, "attrs": {"id": "enableperfmon"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Performance File"], "extent": [14663, 14685], "body": [{"type": "para", "indent": 8, "text": ["When enabled, performance monitor data is written to the path specified by this parameter."], "extent": [14708, 14808]}], "container": true, "attrs": {"id": "perffile"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Save Debug HIP File"], "extent": [14808, 14833], "body": [{"type": "para", "indent": 8, "text": ["When enabled, this parameter specifies the filepath of the debug HIP file that will be written to disk."], "extent": [14860, 14973]}], "container": true, "attrs": {"id": "debughipfile"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Report Debug File as Outputs"], "extent": [14973, 15007], "body": [{"type": "para", "indent": 8, "text": ["When this parameter is enabled, the output files specified by ", {"type": "ui", "text": ["Save Debug HIP File"]}, " and ", {"type": "ui", "text": ["Performance File"]}, " are added as work item outputs when the work item finishes cooking."], "extent": [15034, 15222]}], "container": true, "attrs": {"id": "debugoutputs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Report Nested Node Errors"], "extent": [15222, 15253], "body": [{"type": "para", "indent": 8, "text": ["When this parameter is enabled, error messages will be retrieved and logged for all nodes that are in an error state. When it is disabled, only the top level node error will be logged."], "extent": [15286, 15480]}], "container": true, "attrs": {"id": "reportnestederrors"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Schedulers"], "extent": [15480, 15497], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["TOP Scheduler Override"], "extent": [6683, 6707], "body": [{"type": "para", "indent": 4, "text": ["This parameter overrides the TOP scheduler for this node."], "extent": [6730, 6793]}], "container": true, "attrs": {"id": "topscheduler"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Schedule When"], "extent": [11834, 11849], "body": [{"type": "para", "indent": 4, "text": ["When enabled, this parameter can be used to specify an expression that determines which work items from the node should be scheduled. If the expression returns zero for a given work item, that work item will immediately be marked as cooked instead of being queued with a scheduler. If the expression returns a non-zero value, the work item is scheduled normally."], "extent": [11876, 12244]}], "container": true, "attrs": {"id": "pdg_schedulewhen"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Label"], "extent": [10174, 10191], "body": [{"type": "para", "indent": 4, "text": ["Determines how the node should label its work items. This parameter allows you to assign non-unique label strings to your work items which are then used to identify the work items in the attribute panel, task bar, and scheduler job names."], "extent": [10219, 10463]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Use Default Label"], "extent": [10463, 10487], "body": [{"type": "para", "indent": 8, "text": ["The work items in this node will use the default label from the TOP network, or have no label if the default is unset."], "extent": [10487, 10615]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Inherit From Upstream Item"], "extent": [10615, 10648], "body": [{"type": "para", "indent": 8, "text": ["The work items inherit their labels from their parent work items.        "], "extent": [10648, 10731]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Expression"], "extent": [10731, 10755], "body": [{"type": "para", "indent": 8, "text": ["The work item label is set to the ", {"type": "ui", "text": ["Label Expression"]}, " custom expression which is evaluated for each item."], "extent": [10755, 10871]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node Defines Label"], "extent": [10871, 10896], "body": [{"type": "para", "indent": 8, "text": ["The work item label is defined in the node\u2019s internal logic."], "extent": [10896, 10966]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemlabel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Label Expression"], "extent": [10966, 10984], "body": [{"type": "para", "indent": 4, "text": ["When on, this parameter specifies a custom label for work items created by this node. The parameter can be an expression that includes references to work item attributes or built-in properties. For example, ", {"type": "code", "text": ["$OS: @pdg_frame"]}, " will set the label of each work item based on its frame value."], "extent": [11016, 11309]}], "container": true, "attrs": {"id": "pdg_workitemlabelexpr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Priority"], "extent": [7682, 7702], "body": [{"type": "para", "indent": 4, "text": ["This parameter determines how the current scheduler prioritizes the work items in this node."], "extent": [7733, 7831]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Inherit From Upstream Item"], "extent": [7831, 7864], "body": [{"type": "para", "indent": 11, "text": ["The work items inherit their priority from their parent items. If a work item has no parent, its priority is set to 0."], "extent": [7864, 7995]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Expression"], "extent": [7995, 8019], "body": [{"type": "para", "indent": 11, "text": ["The work item priority is set to the value of ", {"type": "ui", "text": ["Priority Expression"]}, "."], "extent": [8019, 8102]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node Defines Priority"], "extent": [8102, 8130], "body": [{"type": "para", "indent": 7, "text": ["The work item priority is set based on the node\u2019s own internal priority calculations."], "extent": [8130, 8235]}, {"type": "para", "indent": 7, "text": ["This option is only available on the ", {"scheme": "Icon", "value": "MISC/python.svg", "type": "link", "text": "", "fullpath": "/nodes/top/MISC/python.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/pythonprocessor", "type": "link", "text": ["Python Processor TOP"], "fullpath": "/nodes/top/pythonprocessor.html"}, ", ", {"scheme": "Icon", "value": "TOP/ropfetch.svg", "type": "link", "text": "", "fullpath": "/nodes/top/TOP/ropfetch.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/ropfetch", "type": "link", "text": ["ROP Fetch TOP"], "fullpath": "/nodes/top/ropfetch.html"}, ", and ROP Output TOP nodes. These nodes define their own prioritization schemes that are implemented in their node logic."], "extent": [8235, 8531]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitempriority"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Priority Expression"], "extent": [8531, 8552], "body": [{"type": "para", "indent": 4, "text": ["This parameter specifies an expression for work item priority. The expression is evaluated for each work item in the node."], "extent": [8587, 8715]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Work Item Priority"]}, " is set to ", {"type": "ui", "text": ["Custom Expression"]}, "."], "extent": [8715, 8814]}], "container": true, "attrs": {"id": "pdg_workitempriorityexpr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Command"], "extent": [9352, 9371], "body": [{"type": "para", "indent": 4, "text": ["By default, work items use a command line string determined by the node. It\u2019s possible to override the command line by setting this parameter, either by providing a custom script that\u2019s invoked instead of the default one, or by specifying a completely custom command line string."], "extent": [9397, 9682]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Use Default"], "extent": [9682, 9699], "body": [{"type": "para", "indent": 8, "text": ["Use the default command line string for the work item, as determined by the node"], "extent": [9699, 9789]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Script"], "extent": [9789, 9808], "body": [{"type": "para", "indent": 8, "text": ["Override the job script used to cook tasks in this node. The script is invoked with the same argumentas as the default script. The script will be added a file dependency, and is copied in the working directory of the graph automatically."], "extent": [9808, 10055]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Command"], "extent": [10055, 10075], "body": [{"type": "para", "indent": 8, "text": ["specifies a completely custom command line string that fully replaces the default string."], "extent": [10075, 10174]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_commandtype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Command"], "extent": [1018, 1027], "body": [{"type": "para", "indent": 4, "text": ["The command line (executable and arguments) to run when the work item runs.\n    If this field is empty the work item will not be scheduled, and will be\n    instantly marked done once all of its dependencies finish. "], "extent": [1049, 1270]}], "container": true, "attrs": {"id": "pdg_command"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["HDA Parameters"], "extent": [15866, 15887], "body": [{"type": "para", "indent": 0, "text": ["The parameters in this tab section of the node are automatically filled in based on the parameter interface of the current digital asset. The parameters you set here are copied to work item attributes and applied to the asset when it is cooked."], "extent": [15902, 16148]}], "attrs": {"id": "hdaparms"}}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Files"], "extent": [16148, 16160], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["File Dependencies"], "extent": [3902, 3921], "body": [{"type": "para", "indent": 4, "text": ["A list of files that should be copied to the PDG working directory before the first work item in this node is executed.  This can be used to ensure that supporting files like digital assets and custom scripts are available for the work item job."], "extent": [3943, 4194]}, {"type": "para", "indent": 4, "text": ["The specified paths can be absolute or relative to HOUDINI_PATH."], "extent": [4194, 4264]}], "container": true, "attrs": {"id": "pdgnodedeps"}, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "filedepend"}}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [16217, 16226], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/ropfetch", "type": "link", "text": "", "fullpath": "/nodes/top/ropfetch.html"}], "extent": [16226, 16248]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/ropgeometry", "type": "link", "text": "", "fullpath": "/nodes/top/ropgeometry.html"}], "extent": [16248, 16273]}], "container": true}], "text": "Related"}], "title": ["HDA Processor"], "summary": ["Creates work items that cook a digital asset"], "included": ["/nodes/top/processor_common"]}