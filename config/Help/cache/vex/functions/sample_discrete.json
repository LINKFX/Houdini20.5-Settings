{"type": "root", "attrs": {"type": "vex", "context": "all", "group": "sampling", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["sample_discrete"], "extent": [0, 20]}, {"type": "summary", "indent": 0, "text": ["Returns an integer, either uniform or weighted, given a uniform number between 0 and 1."], "extent": [64, 159]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int sample_discrete(int nvalues, float u)"]}], "role": "item", "extent": [159, 211]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int sample_discrete(float weights[], float u)"]}], "role": "item", "extent": [211, 268]}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["nvalues"]}, "role": "item", "extent": [268, 282], "body": [{"type": "para", "indent": 4, "text": ["The returned integer will be uniform in the range ", {"type": "code", "text": ["[0,nvalues-1]"]}, ",\n    returning 0 if ", {"type": "code", "text": ["u==0"]}, ", and returning ", {"type": "code", "text": ["nvalues-1"]}, " if ", {"type": "code", "text": ["u==1"]}, ".  The\n    output will be clamped to that range in case ", {"type": "code", "text": ["u"]}, " is out of the range\n    ", {"type": "code", "text": ["[0,1)"]}, ", to reduce the risk of roundoff on ", {"type": "code", "text": ["u"]}, " causing problems."], "extent": [282, 565]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["weights"]}, "role": "item", "extent": [565, 579], "body": [{"type": "para", "indent": 4, "text": ["Relative weights, (the sum does not need to be 1), of each integer\n    value in the range ", {"type": "code", "text": ["[0,len(weights)-1]"]}, "."], "extent": [579, 696]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["u"]}, "role": "item", "extent": [696, 704], "body": [{"type": "para", "indent": 4, "text": ["A number between 0 and 1."], "extent": [704, 735]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Returns an integer, based on ", {"type": "code", "text": ["u"]}, ", either uniformly weighted from 0 to\n", {"type": "code", "text": ["nvalues-1"]}, ", or weighted based on the ", {"type": "code", "text": ["weights"]}, " array from 0 to\n", {"type": "code", "text": ["len(weights)-1"]}, ".\nGiven uniform random ", {"type": "code", "text": ["u"]}, " values in ", {"type": "code", "text": ["[0,1)"]}, ", the version taking ", {"type": "code", "text": ["nvalues"]}, "\nwill return uniform random integers in ", {"type": "code", "text": ["[0,nvalues-1]"]}, ", and the version\ntaking ", {"type": "code", "text": ["weights"]}, " will return random integers in ", {"type": "code", "text": ["[0,len(weights)-1]"]}, ", where\nthe probability of ", {"type": "code", "text": ["i"]}, " is ", {"type": "code", "text": ["weights[i]/sum_of_weights"]}, "."], "extent": [735, 1165]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1165, 1174], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/rand", "type": "link", "text": "", "fallback_text": "rand()", "fullpath": "/vex/functions/rand.html"}], "extent": [1174, 1188]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/sample_normal", "type": "link", "text": "", "fallback_text": "sample_normal()", "fullpath": "/vex/functions/sample_normal.html"}], "extent": [1188, 1210]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/sample_exponential", "type": "link", "text": "", "fallback_text": "sample_exponential()", "fullpath": "/vex/functions/sample_exponential.html"}], "extent": [1210, 1237]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/sample_cauchy", "type": "link", "text": "", "fallback_text": "sample_cauchy()", "fullpath": "/vex/functions/sample_cauchy.html"}], "extent": [1237, 1259]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/sample_lognormal", "type": "link", "text": "", "fallback_text": "sample_lognormal()", "fullpath": "/vex/functions/sample_lognormal.html"}], "extent": [1259, 1284]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/sample_lognormal_by_median", "type": "link", "text": "", "fallback_text": "sample_lognormal_by_median()", "fullpath": "/vex/functions/sample_lognormal_by_median.html"}], "extent": [1284, 1319]}], "container": true}], "text": "Related"}], "title": ["sample_discrete"], "summary": ["Returns an integer, either uniform or weighted, given a uniform number between 0 and 1."]}