{"type": "root", "attrs": {}, "body": [{"level": 0, "type": "title", "indent": 0, "text": [{"type": "supertitle", "text": ["Python"]}, " script locations"], "extent": [0, 31]}, {"type": "summary", "indent": 0, "text": ["Various places in Houdini where you can customize behavior using Python scripting."], "extent": [31, 123]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["General tips"], "extent": [123, 142], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["If you need to check whether some code ran, the easiest way is to call ", {"scheme": "Hom", "value": "/hom/hou/ui#displayMessage", "type": "link", "text": "", "fallback_text": "hou.ui.displayMessage", "fullpath": "/hom/hou/ui.html#displayMessage", "fragment": "#displayMessage"}, ":"], "extent": [142, 246], "body": [{"lang": "python", "type": "pre", "indent": 4, "text": ["\n    import hou\n    hou.ui.displayMessage(\"I ran! I ran so far away!\")\n    "], "extent": [246, 345]}, {"type": "para", "indent": 4, "text": ["You can also use this to display the values of variables. For example, to see what\u2019s in the ", {"type": "code", "text": ["kwargs"]}, " global variable in an event handler:"], "extent": [345, 497]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    import hou\n    hou.ui.displayMessage(repr(kwargs))\n    "], "extent": [497, 581]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can share code between handlers by putting it in a ", {"scheme": null, "value": "#disk", "type": "link", "text": ["module on disk"], "fullpath": "/hom/locations.html#disk", "fragment": "#disk"}, " and calling it from the handler script. For example, the handler script might just pass the ", {"type": "code", "text": ["kwargs"]}, " to a common function:"], "extent": [581, 790], "body": [{"lang": "python", "type": "pre", "indent": 4, "text": ["\n    import companyutils\n    \n    companyutils.on_created(kwargs)\n    "], "extent": [790, 884]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Houdini has a very large, powerful (but verbose) set of APIs. Browsing through what\u2019s available in the ", {"scheme": null, "value": "/hom/hou/", "type": "link", "text": ["API reference"], "fullpath": "/hom/hou/index.html"}, " will help you discover what\u2019s possible with scripting."], "extent": [884, 1072]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["In general, Houdini looks for ", {"type": "q", "text": ["scripts"]}, " (usually callback scripts) on disk under ", {"type": "code", "text": ["HOUDINI_PATH/scripts/"]}, ", while modules you would import are under ", {"type": "code", "text": ["HOUDINI_PATH/scripts/python/"]}, " or ", {"type": "code", "text": ["HOUDINI_PATH/pythonX.Ylibs"]}, "."], "extent": [1072, 1287]}], "container": true}]}, {"level": 2, "id": "call", "container": true, "type": "h", "indent": 0, "text": ["How to refer to code in other locations in your scripts"], "extent": [1287, 1356], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Python files on disk"], "extent": [1356, 1379], "body": [{"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "#disk", "type": "link", "text": ["how to import modules on disk"], "fullpath": "/hom/locations.html#disk", "fragment": "#disk"}, "."], "extent": [1379, 1427]}], "container": true}, {"type": "dt", "indent": 0, "text": ["In the current ", {"type": "code", "text": [".hip"]}, " file\u2019s ", {"scheme": null, "value": "#session", "type": "link", "text": ["session module"], "fullpath": "/hom/locations.html#session", "fragment": "#session"}], "extent": [1427, 1483], "body": [{"type": "para", "indent": 4, "text": ["Use ", {"type": "code", "text": ["hou.session"]}, " to refer to the current file\u2019s session module."], "extent": [1483, 1553]}], "container": true}, {"type": "dt", "indent": 0, "text": ["In the current node\u2019s Python module"], "extent": [1553, 1590], "body": [{"type": "para", "indent": 4, "text": ["You can ", {"scheme": null, "value": "#asset_modules", "type": "link", "text": ["create a default Python module"], "fullpath": "/hom/locations.html#asset_modules", "fragment": "#asset_modules"}, " in a ", {"scheme": null, "value": "/assets/", "type": "link", "text": ["custom node type"], "fullpath": "/assets/index.html"}, " to hold code related to the node type. Then elsewhere you can get a reference to the node type\u2019s Python module using ", {"scheme": "Hom", "value": "/hom/hou/OpNode#hdaModule", "type": "link", "text": "", "fallback_text": "hou.OpNode.hdaModule", "fullpath": "/hom/hou/OpNode.html#hdaModule", "fragment": "#hdaModule"}, " (or ", {"scheme": "Hom", "value": "/hom/hou/NodeType#hdaModule", "type": "link", "text": "", "fallback_text": "hou.NodeType.hdaModule", "fullpath": "/hom/hou/NodeType.html#hdaModule", "fragment": "#hdaModule"}, ")."], "extent": [1590, 1867]}, {"type": "para", "indent": 4, "text": ["For example, in a ", {"scheme": null, "value": "#parameter_callback_scripts", "type": "link", "text": ["button parameter\u2019s callback script"], "fullpath": "/hom/locations.html#parameter_callback_scripts", "fragment": "#parameter_callback_scripts"}, " or ", {"scheme": null, "value": "#asset_events", "type": "link", "text": ["asset event script"], "fullpath": "/hom/locations.html#asset_events", "fragment": "#asset_events"}, ":"], "extent": [1867, 1998]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    # In a callback script, kwargs[\"node\"] contains a reference to the current node\n    nodeutils = kwargs[\"node\"].hdaModule()\n    \n    nodeutils.my_function()\n    "], "extent": [1998, 2187]}], "container": true}], "container": true}]}, {"level": 2, "id": "startup", "container": true, "type": "h", "indent": 0, "text": ["Startup scripts"], "extent": [2187, 2221], "body": [{"type": "para", "indent": 0, "text": ["Houdini will look for these directories/files in the directories specified on the ", {"scheme": null, "value": "/basics/houdinipath", "type": "link", "text": ["Houdini path"], "fullpath": "/basics/houdinipath.html"}, "."], "extent": [2239, 2358]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["pythonX.Ylibs/pythonrc.py"]}, " "], "role": "td", "extent": [2358, 2388], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Houdini will find any files matching this pattern in the ", {"scheme": null, "value": "/basics/houdinipath", "type": "link", "text": ["Houdini path"], "fullpath": "/basics/houdinipath.html"}, " and run them at startup. ", {"type": "strong", "text": ["Houdini runs this script (if it exists) very early in the startup sequence"]}, ", before the UI is available and before assets are loaded. If you don\u2019t need the UI or assets, or if you want to configure the UI or asset loading before it starts, you can use this script. Otherwise, use ", {"type": "code", "text": ["ready.py"]}, " or ", {"type": "code", "text": ["uiready.py"]}, " instead."], "extent": [2388, 2831]}, {"type": "para", "indent": 4, "text": ["For example, ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/pythonX.Ylibs/pythonrc.py"]}, " for your personal script."], "extent": [2831, 2926]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["pythonX.Ylibs/ready.py"]}, " "], "role": "td", "extent": [2926, 2953], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Houdini will find any files matching this pattern in the ", {"scheme": null, "value": "/basics/config#path", "type": "link", "text": ["Houdini path"], "fullpath": "/basics/config.html#path", "fragment": "#path"}, " and run them at startup after all non-graphical components of Houdini has been loaded."], "extent": [2953, 3141]}, {"type": "para", "indent": 4, "text": ["For example, ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/pythonX.Ylibs/ready.py"]}, " for your personal script, or ", {"type": "code", "text": ["$HSITE/houdiniX.Y/pythonX.Ylibs/ready.py"]}, " for a studio-wide script."], "extent": [3141, 3305]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [3305, 3315], "body": [{"type": "para", "indent": 8, "text": ["The difference between ", {"type": "code", "text": ["pythonrc.py"]}, " and ", {"type": "code", "text": ["ready.py"]}, " is that ", {"type": "code", "text": ["pythonrc.py"]}, " executes ", {"type": "strong", "text": ["before"]}, " HDAs are loaded and ", {"type": "code", "text": ["ready.py"]}, " executes ", {"type": "strong", "text": ["after"]}, " HDAs are loaded."], "extent": [3315, 3481]}], "container": true}], "container": true, "role": "item_group"}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["pythonX.Ylibs/uiready.py"]}, " "], "role": "td", "extent": [3481, 3510], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Houdini will find any files matching this pattern in the ", {"scheme": null, "value": "/basics/houdinipath", "type": "link", "text": ["Houdini path"], "fullpath": "/basics/houdinipath.html"}, " and run them after the UI is ready. You should use this script to set up interactive  since when it runs the UI and UI scripting is available, and Houdini has loaded . Houdini ", {"type": "strong", "text": ["only runs this script (if it exists) in interactive sessions"]}, ". If your code needs assets to be loaded, but you want it available in both Houdini, batch mode, and ", {"type": "code", "text": ["hython"]}, ", use ", {"type": "code", "text": ["ready.py"]}, " instead."], "extent": [3510, 3984]}, {"type": "para", "indent": 4, "text": ["For example, ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/pythonX.Ylibs/uiready.py"]}, " for your personal script."], "extent": [3984, 4078]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["scripts/123.py"]}, " "], "role": "td", "extent": [4078, 4097], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Houdini runs this script when it is started ", {"type": "em", "text": ["without"]}, " a scene (", {"type": "code", "text": [".hip"]}, ") file.\n    Houdini will only run the ", {"type": "em", "text": ["first"]}, " ", {"type": "code", "text": ["123.py"]}, " script it finds in the path.\n    This is useful for customizing the empty scene, for example if you want to start every scene with a default lighting rig."], "extent": [4097, 4385]}, {"type": "para", "indent": 4, "text": ["This is the Python equivalent of the ", {"type": "code", "text": ["123.cmd"]}, " Hscript file. If ", {"type": "code", "text": ["123.cmd"]}, " and ", {"type": "code", "text": ["123.py"]}, " both exist, Houdini will ", {"type": "em", "text": ["only"]}, " run ", {"type": "code", "text": ["123.py"]}, "."], "extent": [4385, 4523]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [4523, 4533], "body": [{"type": "para", "indent": 8, "text": ["Only Houdini FX runs ", {"type": "code", "text": ["123.py"]}, ".  Houdini Core runs ", {"type": "code", "text": ["houdinicore.py"]}, "\n        instead of ", {"type": "code", "text": ["123.py"]}, " on startup.  Both ", {"type": "code", "text": ["123.py"]}, " and ", {"type": "code", "text": ["houdinicore.py"]}, "\n        serve the same purpose but for different products."], "extent": [4533, 4744]}], "container": true}], "container": true, "role": "item_group"}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["scripts/456.py"]}, " "], "role": "td", "extent": [4744, 4763], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Houdini runs this script whenever a scene file is loaded (including when Houdini starts up with a scene file)."], "extent": [4763, 4883]}, {"type": "para", "indent": 4, "text": ["This is the Python equivalent of the ", {"type": "code", "text": ["456.cmd"]}, " Hscript file."], "extent": [4883, 4949]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["scripts/", {"type": "var", "text": ["category"]}, "/"]}, "\n", {"type": "code", "text": [{"type": "var", "text": ["nodename"]}, "_", {"type": "var", "text": ["eventtype"]}, ".py"]}, " "], "role": "td", "extent": [4949, 5007], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "#events", "type": "link", "text": ["node event scripts"], "fullpath": "/hom/locations.html#events", "fragment": "#events"}, " below."], "extent": [5007, 5052]}]}], "divider": false}]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [5052, 5058], "body": [{"type": "para", "indent": 4, "text": ["You need to restart Houdini to have it recognize new scripts. However, you can change existing scripts without needing to restart Houdini."], "extent": [5058, 5203]}], "container": true}], "container": true, "role": "item_group"}], "attrs": {"index": "document"}}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Run scripts before and/or after saving the scene (.hip) file"], "extent": [5203, 5270], "body": [{"type": "para", "indent": 0, "text": ["Houdini lets you run scripts before and/or after a save. This can be useful to update asset management and source control tools whenever a save occurs."], "extent": [5270, 5424]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Before Houdini saves the scene file, it will run ", {"type": "code", "text": ["HOUDINI_PATH/scripts/beforescenesave.py"]}, " if it exists."], "extent": [5424, 5532]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["After Houdini attempts to save the scene file, it will run ", {"type": "code", "text": ["HOUDINI_PATH/scripts/afterscenesave.py"]}, " if it exists."], "extent": [5532, 5649]}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [5649, 5654], "body": [{"type": "para", "indent": 4, "text": ["These scripts are useful because they're automatically global (they run for any scene file you work on), and they're easy to set up. On the other hand, they're difficult to set up programmatically, and they only relate to saving."], "extent": [5654, 5893]}, {"type": "para", "indent": 4, "text": ["The more general/fine-grained way to react to scene file events is to set up a ", {"scheme": null, "value": "#scene_events", "type": "link", "text": ["scene file event handler"], "fullpath": "/hom/locations.html#scene_events", "fragment": "#scene_events"}, "."], "extent": [5893, 6019]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["The scripts run in a context containing a global dictionary named ", {"type": "code", "text": ["kwargs"]}, ". This dictionary contains the following items:"], "extent": [6019, 6142]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["file"]}, " (", {"type": "code", "text": ["str"]}, ")"], "extent": [6142, 6158], "body": [{"type": "para", "indent": 4, "text": ["The path to the scene file ", {"type": "em", "text": ["will be"]}, " saved to. (In ", {"type": "code", "text": ["beforescenesave.py"]}, ", a file may or may not already exist there)."], "extent": [6158, 6280]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["autosave"]}, " (", {"type": "code", "text": ["bool"]}, ")"], "extent": [6280, 6301], "body": [{"type": "para", "indent": 4, "text": ["Contains ", {"type": "code", "text": ["True"]}, " if this save was triggered by the autosave timer. If this is ", {"type": "code", "text": ["False"]}, ", this is a ", {"type": "q", "text": ["regular"]}, " save caused by the user."], "extent": [6301, 6437]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["success"]}, " (", {"type": "code", "text": ["bool"]}, ")"], "extent": [6437, 6457], "body": [{"type": "para", "indent": 4, "text": ["(", {"type": "code", "text": ["afterscenesave.py"]}, " only) Contains ", {"type": "code", "text": ["True"]}, " if Houdini was able to save to the file."], "extent": [6457, 6546]}], "container": true}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [6546, 6552], "body": [{"type": "para", "indent": 4, "text": ["Houdini might not actually be able to save the file at the given path (for example, if the user doesn\u2019t have the proper permissions), so the file still may not exist when ", {"type": "code", "text": ["afterscenesave.py"]}, " runs, or may not contain updated data. You should check ", {"type": "code", "text": ["kwargs[\"success\"]"]}, " in the script before you assume the file contains the saved data."], "extent": [6552, 6890]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["The following example automatically ", {"type": "q", "text": ["stages"]}, " the file for commit in ", {"type": "code", "text": ["git"]}, " when it\u2019s saved: "], "extent": [6890, 6983]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\n# afterscenesave.py\nimport subprocess\n\n# Only run the command if the save succeeded and it's\n# not an autosave\nif kwargs[\"success\"] and not kwargs[\"autosave\"]:\n    # Pass the scene file path to the git command\n    subprocess.call(\"git\", \"add\", kwargs[\"file\"])\n"], "extent": [6983, 7260]}]}, {"level": 2, "id": "scene_events", "container": true, "type": "h", "indent": 0, "text": ["Scene file event callbacks"], "extent": [7260, 7310], "body": [{"type": "para", "indent": 0, "text": ["You can register a callback function that Houdini will call whenever a the scene file changes. Houdini calls the function with one argument. The argument is a ", {"scheme": "Hom", "value": "/hom/hou/hipFileEventType", "type": "link", "text": "", "fallback_text": "hou.hipFileEventType", "fullpath": "/hom/hou/hipFileEventType.html"}, " object representing the type of event that occurred."], "extent": [7310, 7551]}, {"type": "para", "indent": 0, "text": ["Instead of subscribing to a specific event, the script will be called for every event, and you need to check the event type to see if it\u2019s an event you're interested in. This is usually more convenient for scene events, since you will often share code between reactions to several events."], "extent": [7551, 7841]}, {"type": "para", "indent": 0, "text": ["In the script, you can use the functions in the ", {"scheme": "Hom", "value": "/hom/hou/hipFile", "type": "link", "text": "", "fallback_text": "hou.hipFile", "fullpath": "/hom/hou/hipFile.html"}, " module to get information about the current scene file. Each file operation (New file, Open file, Import file, Save) has corresponding ", {"type": "q", "text": ["Before"]}, " and ", {"type": "q", "text": ["After"]}, " event types, so you can read the scene file\u2019s values before and/or after the change."], "extent": [7841, 8149]}, {"type": "para", "indent": 0, "text": ["For example, to run some code every time a new scene file is loaded:"], "extent": [8149, 8219]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\ndef scene_was_loaded(event_type):\n    if event_type == hou.hipFileEventType.AfterLoad:\n        print(\"The user loaded\", hou.hipFile.path())\n"], "extent": [8219, 8376]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Parameter expressions"], "extent": [8376, 8406], "body": [{"type": "para", "indent": 0, "text": ["See ", {"scheme": null, "value": "expressions", "type": "link", "text": ["Python parameter expressions"], "fullpath": "/hom/expressions.html"}, "."], "extent": [8406, 8457]}]}, {"level": 2, "id": "session", "container": true, "type": "h", "indent": 0, "text": ["Session module"], "extent": [8457, 8488], "body": [{"type": "para", "indent": 0, "text": ["Houdini keeps a Python module associated with the scene file. You can edit it using ", {"type": "ui", "text": ["Window \u25b8 Python source editor"]}, ". This gives you a convenient place to store functions, classes, and objects specific to the scene file, and automatically have them saved and loaded with the scene file."], "extent": [8488, 8778]}, {"type": "para", "indent": 0, "text": ["When the scene file is loaded (or when you edit the source code), the module source code is evaluated and the module is available to other Python code as ", {"type": "code", "text": ["hou.session"]}, "."], "extent": [8778, 8948]}, {"type": "para", "indent": 0, "text": ["For example, you write a ", {"type": "code", "text": ["log_deletion()"]}, " function in the Python source editor, then call it from an ", {"scheme": null, "value": "#asset_events", "type": "link", "text": ["asset deletion callback"], "fullpath": "/hom/locations.html#asset_events", "fragment": "#asset_events"}, " like this:"], "extent": [8948, 9101]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\nhou.session.log_deletion()\n"], "extent": [9101, 9145]}, {"type": "para", "indent": 0, "text": ["You can programmatically modify the ", {"type": "code", "text": ["hou.session"]}, " source code using the ", {"scheme": "Hom", "value": "/hom/hou/appendSessionModuleSource", "type": "link", "text": "", "fallback_text": "hou.appendSessionModuleSource", "fullpath": "/hom/hou/appendSessionModuleSource.html"}, " function. The source code is saved with the scene file."], "extent": [9145, 9311]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [9311, 9317], "body": [{"type": "para", "indent": 4, "text": ["Any dynamic changes you make the the module object once it\u2019s loaded into memory (for example ", {"type": "code", "text": ["hou.session.x = \"foo\""]}, ") are ", {"type": "strong", "text": ["not"]}, " saved with the scene file. Only the module source code is saved with the scene file."], "extent": [9317, 9536]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "asset_modules", "container": true, "type": "h", "indent": 0, "text": ["Asset modules"], "extent": [9536, 9572], "body": [{"type": "para", "indent": 0, "text": ["Each ", {"scheme": null, "value": "/assets/", "type": "link", "text": ["digital asset"], "fullpath": "/assets/index.html"}, " type has a Python module, similar to the scene file\u2019s ", {"type": "code", "text": ["hou.session"]}, " module. You can use this module to store functions, classes, and objects specific to the asset type."], "extent": [9572, 9773]}, {"type": "para", "indent": 0, "text": ["The module source code is stored in a section of the asset named ", {"type": "code", "text": ["PythonModule"]}, " (on the ", {"type": "ui", "text": ["Extra files"]}, " tab of the ", {"scheme": null, "value": "/ref/windows/optype", "type": "link", "text": ["type properties window"], "fullpath": "/ref/windows/optype.html"}, "). You can create this section manually, or Houdini will create it automatically if you create a ", {"type": "q", "text": ["Python Module"]}, " event handler on the ", {"type": "ui", "text": ["Scripts"]}, " tab."], "extent": [9773, 10084]}, {"type": "para", "indent": 0, "text": ["In the HDA module\u2019s code, you can get a reference to the HDA\u2019s node type using:"], "extent": [10084, 10165]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\nnodetype = kwargs[\"type\"]\n"], "extent": [10165, 10208]}, {"type": "para", "indent": 0, "text": ["You can access the module using the ", {"scheme": "Hom", "value": "/hom/hou/NodeType#hdaModule", "type": "link", "text": "", "fallback_text": "hou.NodeType.hdaModule", "fullpath": "/hom/hou/NodeType.html#hdaModule", "fragment": "#hdaModule"}, " method (if you have a ", {"type": "code", "text": ["NodeType"]}, " object) or the ", {"scheme": "Hom", "value": "/hom/hou/OpNode#hdaModule", "type": "link", "text": "", "fallback_text": "hou.OpNode.hdaModule", "fullpath": "/hom/hou/OpNode.html#hdaModule", "fragment": "#hdaModule"}, " method (if you nave a ", {"type": "code", "text": ["Node"]}, " object). For example, to call a ", {"type": "code", "text": ["myfunc"]}, " function on the ", {"type": "code", "text": ["myasset"]}, " object type:"], "extent": [10208, 10459]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\nhou.nodeType(hou.objNodeTypeCategory(), \"myasset\").hdaModule().my_function()\n"], "extent": [10459, 10553]}, {"type": "para", "indent": 0, "text": ["Python expressions on nodes inside the asset definition can access the ", {"type": "code", "text": ["PythonModule"]}, "\nthrough relative references. For example, a Python parameter expression on a node in the asset\u2019s definition subnetwork could use ", {"type": "code", "text": ["hou.node(\"..\").hdaModule().foo()"]}, "."], "extent": [10553, 10806]}, {"type": "para", "indent": 0, "text": ["If you have so much Python code inside an asset that you want to organize it into multiple modules, you can create other HDA sections to store those modules. For example, you could create a ", {"type": "code", "text": ["FooModule"]}, " section containing Python code. Then in the main ", {"type": "code", "text": ["PythonModule"]}, " section, use the following code to import the contents of ", {"type": "code", "text": ["FooModule"]}, " as ", {"type": "code", "text": ["foo"]}, ":"], "extent": [10806, 11153]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\nimport toolutils\nfoo = toolutils.createModuleFromSection('bar', kwargs['type'], 'FooModule')\n"], "extent": [11153, 11263]}]}, {"level": 2, "id": "disk", "container": true, "type": "h", "indent": 0, "text": ["Modules on disk"], "extent": [11263, 11294], "body": [{"type": "para", "indent": 0, "text": ["Houdini automatically adds any ", {"type": "code", "text": ["$HOUDINI_PATH/pythonX.Xlibs"]}, " directories to the Python path, meaning packages and modules inside those directories can be imported in Python code."], "extent": [11294, 11475]}, {"type": "para", "indent": 0, "text": ["To make packages and modules in other locations available to python, use the ", {"type": "code", "text": ["$PYTHONPATH"]}, " environment variable, or modify the ", {"type": "code", "text": ["sys.path"]}, " list in Python."], "extent": [11475, 11630]}, {"type": "para", "indent": 0, "text": ["For example, to import the module in ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/pythonX.Ylibs/mystuff.py"]}, ":"], "extent": [11630, 11719]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\nimport mystuff\n\nmystuff.my_function()\n"], "extent": [11719, 11774]}, {"type": "para", "indent": 0, "text": ["If you are trying to keep your script to a single line (for example, in a parameter expression or callback), you can use Python\u2019s built-in ", {"type": "code", "text": ["__import__"]}, " function to return the module and immediately access its attributes:"], "extent": [11774, 11997]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\n__import__(\"mystuff\").my_function()\n"], "extent": [11997, 12050]}]}, {"level": 2, "id": "asset_events", "container": true, "type": "h", "indent": 0, "text": ["Digital asset event handlers"], "extent": [12050, 12102], "body": [{"type": "para", "indent": 0, "text": ["You can write ", {"scheme": null, "value": "/assets/", "type": "link", "text": ["Digital asset"], "fullpath": "/assets/index.html"}, " event handlers in Python. After you create an event handler on the ", {"type": "ui", "text": ["Scripts"]}, " page of the ", {"scheme": null, "value": "/ref/windows/optype", "type": "link", "text": ["type properties window"], "fullpath": "/ref/windows/optype.html"}, " (for example ", {"type": "q", "text": ["On Created"]}, "), make sure ", {"type": "ui", "text": ["Edit as"]}, " is set to ", {"type": "q", "text": ["Python"]}, "."], "extent": [12102, 12349]}, {"type": "para", "indent": 0, "text": ["The event script can access the event parameters in a global dictionary variable called ", {"type": "code", "text": ["kwargs"]}, ". For example, to get the ", {"scheme": "Hom", "value": "/hom/hou/OpNode", "type": "link", "text": "", "fallback_text": "hou.OpNode", "fullpath": "/hom/hou/OpNode.html"}, " object involved in the event, use ", {"type": "code", "text": ["kwargs[\"node\"]"]}, "."], "extent": [12349, 12541]}, {"type": "para", "indent": 0, "text": ["See ", {"scheme": null, "value": "#access_contents", "type": "link", "text": ["how to reference embedded files"], "fullpath": "/hom/locations.html#access_contents", "fragment": "#access_contents"}, " for information on how to refer to the embedded scripts wherever Houdini expects a filename."], "extent": [12541, 12690]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [12690, 12695], "body": [{"type": "para", "indent": 4, "text": ["These handlers let you set up scripts that run when an event happens for a ", {"type": "em", "text": ["specific node type"]}, ". You can also set up ", {"scheme": null, "value": "#general_asset_events", "type": "link", "text": ["general asset event handlers"], "fullpath": "/hom/locations.html#general_asset_events", "fragment": "#general_asset_events"}, " which run when ", {"type": "em", "text": ["any"]}, " asset or asset library is loaded or unloaded."], "extent": [12695, 12937]}], "container": true}], "container": true, "role": "item_group"}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [12937, 12943], "body": [{"type": "para", "indent": 4, "text": ["The default language when creating a handler in the type properties interface is now Python, however, if you ", {"type": "strong", "text": ["create a handler section through scripting"]}, ", its default language will still be HScript."], "extent": [12943, 13147]}, {"type": "para", "indent": 4, "text": ["To set the default language of an asset section to Python through script, use the ", {"scheme": "Hom", "value": "/hom/HDADefinition#setExtraFileOption", "type": "link", "text": "", "fallback_text": "HDADefinition.setExtraFileOption", "fullpath": "/hom/HDADefinition.html#setExtraFileOption", "fragment": "#setExtraFileOption"}, " method to set the option ", {"type": "code", "text": [{"type": "var", "text": ["EventName"]}, "/IsPython"]}, " to ", {"type": "code", "text": ["True"]}, ":"], "extent": [13147, 13334]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    on_created_body = \"\"\"\n    from my_studio import register_stats\n    register_stats.createdSpecialNode()\n    \"\"\"\n\n    # Get a reference to the asset definition\n    hdadef = hou.nodeType(\"mystudio::Sop/flamingo::2.0\").definition()\n    # Create the event handler section on the asset\n    hdadef.addSection('OnCreated', on_created_body)\n    # Set the \"IsPython\" option on the section\n    hdadef.setExtraFileOption(\"OnCreated/IsPython\", True)\n    "], "extent": [13334, 13804]}], "container": true}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Event types"], "extent": [13804, 13826], "body": [{"type": "para", "indent": 0, "text": ["The following events can trigger scripts."], "extent": [13826, 13870]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Before First Create (", {"type": "code", "text": ["PreFirstCreate"]}, ") "], "role": "td", "extent": [13870, 13911], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs when the ", {"type": "em", "text": ["first instance"]}, " of a node type is created in a scene. ", {"type": "em", "text": ["This includes when Houdini is creating nodes as it loads a scene file from disk"]}, "."], "extent": [13911, 14072]}, {"type": "para", "indent": 4, "text": ["For example, if a scene has no geometry objects, when you add one, this would trigger the ", {"type": "code", "text": ["PreFirstCreate"]}, " handler for the geometry object type. If you then added another geometry object, the event would ", {"type": "em", "text": ["not"]}, " trigger."], "extent": [14072, 14300]}, {"type": "para", "indent": 4, "text": ["This can be useful for setting up an environment necessary for one or more instances of the asset to work. For example, copying texture maps to required locations, or setting environment variables."], "extent": [14300, 14507]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["In the script you can check if the node is being created because Houdini is loading a file using the ", {"scheme": "Hom", "value": "/hom/hou/hipFile#isLoadingHipFile", "type": "link", "text": "", "fallback_text": "hou.hipFile.isLoadingHipFile", "fullpath": "/hom/hou/hipFile.html#isLoadingHipFile", "fragment": "#isLoadingHipFile"}, " function."], "extent": [14507, 14664]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["The user cannot undo the actions performed in this script. You may want to include corresponding code in a ", {"type": "code", "text": ["PostLastDelete"]}, " handler (see below) to undo changes made by this script."], "extent": [14664, 14852]}], "container": true}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["On Created (", {"type": "code", "text": ["OnCreated"]}, ") "], "role": "td", "extent": [14852, 14879], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs after the user creates a new instance of a node type (", {"type": "em", "text": ["not"]}, " when a scene file loads, see ", {"type": "code", "text": ["OnLoaded"]}, " below)."], "extent": [14879, 15001]}, {"type": "para", "indent": 4, "text": ["You can use this, for example, to make changes to a node that Houdini will automatically save (for example, add ", {"scheme": null, "value": "/network/spare", "type": "link", "text": ["spare parameters"], "fullpath": "/network/spare.html"}, ")."], "extent": [15001, 15154]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["On Loaded (", {"type": "code", "text": ["OnLoaded"]}, ") "], "role": "td", "extent": [15154, 15179], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs after an instance of a node type is created as Houdini loads a scene file from disk (", {"type": "em", "text": ["not"]}, " when a user creates a node in the network editor, see ", {"type": "code", "text": ["OnCreated"]}, " above). This also runs when pasting nodes from the clipboard."], "extent": [15179, 15412]}, {"type": "para", "indent": 4, "text": ["This does ", {"type": "em", "text": ["not"]}, " run when loading the node as ", {"type": "em", "text": ["part of the contents of another asset"]}, ". If you need to do something when a node inside an asset loads, you must put that code in the asset\u2019s load handler."], "extent": [15412, 15622]}, {"type": "para", "indent": 4, "text": ["This runs on each node ", {"type": "em", "text": ["after"]}, " all nodes are loaded, so the script will see the complete scene."], "extent": [15622, 15723]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["On Updated (", {"type": "code", "text": ["OnUpdated"]}, ") "], "role": "td", "extent": [15723, 15750], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs for each instance of an asset when the asset updates because the shared definition changed."], "extent": [15750, 15852]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["On Deleted (", {"type": "code", "text": ["OnDeleted"]}, ") "], "role": "td", "extent": [15852, 15879], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs before an instance of a node type is deleted (while the node still exists). ", {"type": "em", "text": ["This includes when Houdini is ", {"type": "q", "text": ["unloading"]}, " the node"]}, " because the user is starting a new file, opening a file, or quitting."], "extent": [15879, 16092]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["In the script you can check if the node is being deleted because Houdini is unloading the scene using the ", {"scheme": "Hom", "value": "/hom/hou/hipFile#isShuttingDown", "type": "link", "text": "", "fallback_text": "hou.hipFile.isShuttingDown", "fullpath": "/hom/hou/hipFile.html#isShuttingDown", "fragment": "#isShuttingDown"}, " function (despite the name, this function returns ", {"type": "code", "text": ["True"]}, " when Houdini is starting a new file or opening a file as well as when it is quitting)."], "extent": [16092, 16386]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Unrelated to this event handler, each node instance can have its own individual ", {"type": "q", "text": ["deletion script"]}, ". The user can edit this (HScript command language only) script in the parameter editor using ", {"type": "ui", "text": [{"scheme": "Glyph", "value": "fa-cog", "type": "link", "text": null, "fullpath": "/hom/fa-cog.html"}, " \u25b8 Edit deletion script"]}, ". The ", {"type": "code", "text": ["OnDeleted"]}, " handler runs ", {"type": "em", "text": ["before"]}, " the node\u2019s individual ", {"type": "q", "text": ["deletion script"]}, " if it exists."], "extent": [16386, 16714]}], "container": true}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["After Last Delete (", {"type": "code", "text": ["PostLastDelete"]}, ") "], "role": "td", "extent": [16714, 16753], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs after the ", {"type": "em", "text": ["last instance"]}, " of a node type is deleted in a scene. ", {"type": "em", "text": ["This includes when Houdini is ", {"type": "q", "text": ["unloading"]}, " the node"]}, " because the user is starting a new file, opening a file, or quitting."], "extent": [16753, 16950]}, {"type": "para", "indent": 4, "text": ["This can be useful to clean up changes made in a ", {"type": "code", "text": ["PreFirstCreate"]}, " script (see above)."], "extent": [16950, 17041]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["The user cannot undo actions performed in this script."], "extent": [17041, 17107]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["In the script you can check if the node is being deleted because Houdini is unloading the scene using the ", {"scheme": "Hom", "value": "/hom/hou/hipFile#isShuttingDown", "type": "link", "text": "", "fallback_text": "hou.hipFile.isShuttingDown", "fullpath": "/hom/hou/hipFile.html#isShuttingDown", "fragment": "#isShuttingDown"}, " function (despite the name, this function returns ", {"type": "code", "text": ["True"]}, " when Houdini is starting a new file or opening a file as well as when it is quitting)."], "extent": [17107, 17397]}], "container": true}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["On Input Changed (", {"type": "code", "text": ["OnInputChanged"]}, ") "], "role": "td", "extent": [17397, 17435], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs when an input on a node of this type is connected, disconnected, or switched. The script can use ", {"type": "code", "text": ["kwargs[\"input_index\"]"]}, " to get the number (starting from 0) of the input that changed."], "extent": [17435, 17629]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["On Name Changed (", {"type": "code", "text": ["OnNameChanged"]}, ") "], "role": "td", "extent": [17629, 17665], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs after the user changes the name of a node of this type. The script can use ", {"type": "code", "text": ["kwargs[\"old_name\"]"]}, " to get the previous name string."], "extent": [17665, 17808]}, {"type": "para", "indent": 4, "text": ["This can be useful, for example, if you are somehow indexing nodes by their names or paths in some external storage, to keep the external index up-to-date."], "extent": [17808, 17969]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["On Install (", {"type": "code", "text": ["OnInstall"]}, ") "], "role": "td", "extent": [17969, 17996], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs when this node type is installed into the session."], "extent": [17996, 18061]}, {"type": "para", "indent": 4, "text": ["Note that saving changes to an HDA node type triggers the On Uninstall and On Install scripts since the old HDA node type is uninstalled first before the new HDA node type with the latest changes is installed."], "extent": [18061, 18276]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["On Uninstall (", {"type": "code", "text": ["OnUninstall"]}, ") "], "role": "td", "extent": [18276, 18307], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Runs when this node type is uninstalled from the session."], "extent": [18307, 18374]}, {"type": "para", "indent": 4, "text": ["Note that saving changes to an HDA node type triggers the On Uninstall and On Install scripts since the old HDA node type is uninstalled first before the new HDA node type with the latest changes is installed."], "extent": [18374, 18589]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Sync Node Version (", {"type": "code", "text": ["SyncNodeVersion"]}, ") "], "role": "td", "extent": [18589, 18629], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["This is part of the older versioning system, allowing you to write an ", {"type": "q", "text": ["upgrade"]}, " handler that can automatically convert old versions of a node to the latest version. This system may be useful for small-scale, backwards-compatible changes such as adding new parameters. See ", {"scheme": null, "value": "/assets/versioning_systems", "type": "link", "text": ["the two types of asset versioning"], "fullpath": "/assets/versioning_systems.html"}, " for more information."], "extent": [18629, 18991]}, {"type": "para", "indent": 4, "text": ["This runs when an asset instance loads and notices the asset\u2019s ", {"type": "ui", "text": ["Version"]}, " field has changed since the scene file was saved. It runs after a node\u2019s parameters are loaded and resolved, but before the ", {"type": "code", "text": ["OnLoaded"]}, " or ", {"type": "code", "text": ["OnUpdated"]}, " event handlers."], "extent": [18991, 19241]}, {"type": "para", "indent": 4, "text": ["The script can get the old and current version strings in ", {"type": "code", "text": ["kwargs[\"old_version\"]"]}, " and ", {"type": "code", "text": ["kwargs[\"current_version\"]"]}, ". "], "extent": [19241, 19366]}, {"type": "para", "indent": 4, "text": ["The handler then does the work of changing the node (using the reference in ", {"type": "code", "text": ["kwargs[\"node\"]"]}, ") to match the current version. This means you must update the script every time you update the asset."], "extent": [19366, 19570]}, {"type": "para", "indent": 4, "text": ["(You can trigger a node\u2019s upgrade script manually using ", {"scheme": "Hom", "value": "/hom/hou/OpNode#syncNodeVersionIfNeeded", "type": "link", "text": "", "fallback_text": "hou.OpNode.syncNodeVersionIfNeeded", "fullpath": "/hom/hou/OpNode.html#syncNodeVersionIfNeeded", "fragment": "#syncNodeVersionIfNeeded"}, ".)"], "extent": [19570, 19675]}]}], "divider": false}]}]}, {"level": 3, "id": "node_event_kwargs", "container": true, "type": "h", "indent": 0, "text": ["Script variables"], "extent": [19675, 19720], "body": [{"type": "para", "indent": 0, "text": ["The handler scripts run in an environment with a global ", {"type": "code", "text": ["kwargs"]}, " dictionary. The following table shows what items are available in the dictionary for the various event types:"], "extent": [19720, 19897]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Key "], "role": "th", "extent": [19897, 19904], "container": true}, {"type": "cell", "indent": 4, "text": ["Value "], "role": "th", "extent": [19904, 19917], "container": true}, {"type": "cell", "indent": 8, "text": ["Events "], "role": "th", "extent": [19917, 19935]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["node"]}, " "], "role": "td", "extent": [19935, 19944], "container": true}, {"type": "cell", "indent": 4, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/OpNode", "type": "link", "text": "", "fallback_text": "hou.OpNode", "fullpath": "/hom/hou/OpNode.html"}, " reference to the node instance "], "role": "td", "extent": [19944, 20000], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["OnCreated"]}, ", ", {"type": "code", "text": ["OnUpdated"]}, ", ", {"type": "code", "text": ["OnInputChanged"]}, ", ", {"type": "code", "text": ["OnNameChanged"]}, ", ", {"type": "code", "text": ["OnDeleted"]}, ", ", {"type": "code", "text": ["SyncNodeVersion"]}], "extent": [20000, 20100]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["type"]}, " "], "role": "td", "extent": [20100, 20109], "container": true}, {"type": "cell", "indent": 4, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/NodeType", "type": "link", "text": "", "fallback_text": "hou.NodeType", "fullpath": "/hom/hou/NodeType.html"}, " reference to the node type "], "role": "td", "extent": [20109, 20163], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["OnLoaded"]}, ", ", {"type": "code", "text": ["PreFirstCreate"]}, ", ", {"type": "code", "text": ["OnCreated"]}, ", ", {"type": "code", "text": ["OnUpdated"]}, ", ", {"type": "code", "text": ["OnInputChanged"]}, ", ", {"type": "code", "text": ["OnNameChanged"]}, ", ", {"type": "code", "text": ["OnDeleted"]}, ", ", {"type": "code", "text": ["PostLastDelete"]}, ", ", {"type": "code", "text": ["UpgradeLoadedParms"]}, ", ", {"type": "code", "text": ["PythonModule"]}], "extent": [20163, 20330]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["old_name"]}, " "], "role": "td", "extent": [20330, 20343], "container": true}, {"type": "cell", "indent": 4, "text": ["A string containing the old name of the HDA instance. "], "role": "td", "extent": [20343, 20403], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["OnNameChanged"]}], "extent": [20403, 20427]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["input_index"]}, " "], "role": "td", "extent": [20427, 20443], "container": true}, {"type": "cell", "indent": 4, "text": ["The index of the input that was connected/disconnected. "], "role": "td", "extent": [20443, 20505], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["OnInputChanged"]}], "extent": [20505, 20530]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["current_version"]}, " "], "role": "td", "extent": [20530, 20550], "container": true}, {"type": "cell", "indent": 4, "text": ["The current HDA version string. "], "role": "td", "extent": [20550, 20588], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["SyncNodeVersion"]}], "extent": [20588, 20614]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["old_version"]}, " "], "role": "td", "extent": [20614, 20630], "container": true}, {"type": "cell", "indent": 4, "text": ["The HDA version string that the node was last saved with. "], "role": "td", "extent": [20630, 20694], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["SyncNodeVersion"]}], "extent": [20694, 20722]}]}], "divider": false}]}]}, {"level": 3, "id": "node_event_files", "container": true, "type": "h", "indent": 0, "text": ["Node event handler files"], "extent": [20722, 20774], "body": [{"type": "para", "indent": 0, "text": ["You can put event handler scripts in files in the Houdini path instead of/in addition to embedding them in assets. To respond to an event on a digital asset, you probably just want to use the built-in ", {"scheme": null, "value": "#asset_events", "type": "link", "text": ["event handler"], "fullpath": "/hom/locations.html#asset_events", "fragment": "#asset_events"}, " support in the ", {"scheme": null, "value": "/ref/windows/optype", "type": "link", "text": ["type properties window"], "fullpath": "/ref/windows/optype.html"}, ". However, using script files can have the following benefits:"], "extent": [20774, 21129]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["These on-disk event scripts work for both assets ", {"type": "em", "text": ["and built-in node types"]}, "."], "extent": [21129, 21208]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can install ", {"type": "q", "text": ["global"]}, " event handler files that run for ", {"type": "em", "text": ["any"]}, " node type."], "extent": [21208, 21286]}], "container": true}, {"type": "para", "indent": 0, "text": ["Houdini looks for files matching the following patterns:"], "extent": [21286, 21344]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Files matching the pattern ", {"type": "code", "text": ["HOUDINI_PATH/scripts/", {"type": "var", "text": ["category"]}, "/", {"type": "var", "text": ["nodename"]}, "_", {"type": "var", "text": ["event"]}, ".py"]}, " (for example, ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/scripts/obj/geo_OnCreated.py"]}, ") will run when the given event type occurs to a node of the given type."], "extent": [21344, 21576], "body": [{"type": "para", "indent": 4, "text": ["For complex node type names with namespaces and/or versions, replace any ", {"type": "code", "text": ["::"]}, " separators in the name with ", {"type": "strong", "text": ["single hyphens"]}, "."], "extent": [21576, 21705]}, {"type": "para", "indent": 4, "text": ["For example, if the node type name is ", {"type": "code", "text": ["edu.toronto3d::foo::2.0"]}, ", you would use a filename like ", {"type": "code", "text": ["edu.toronto3d-foo-2.0_OnCreated.py"]}, "."], "extent": [21705, 21843]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Files matching the pattern ", {"type": "code", "text": ["HOUDINI_PATH/scripts/", {"type": "var", "text": ["event"]}, ".py"]}, " run when the given event type occurs to ", {"type": "em", "text": ["any"]}, " node."], "extent": [21843, 21961]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [21961, 21967], "body": [{"type": "para", "indent": 4, "text": ["The script path uses the ", {"type": "q", "text": ["directory"]}, " form for node categories, not the ", {"type": "q", "text": ["table"]}, " form. For example, ", {"type": "code", "text": ["obj"]}, " not ", {"type": "code", "text": ["Object"]}, ", ", {"type": "code", "text": ["sop"]}, " not ", {"type": "code", "text": ["Sop"]}, ", ", {"type": "code", "text": ["out"]}, " not ", {"type": "code", "text": ["Rop"]}, ". These different forms are an unfortunate historical inconsistency in Houdini."], "extent": [21967, 22202]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["An event script file will run in an environment with a built-in ", {"type": "code", "text": ["kwargs"]}, " global dictionary variable. To get the ", {"scheme": "Hom", "value": "/hom/hou/OpNode", "type": "link", "text": "", "fallback_text": "hou.OpNode", "fullpath": "/hom/hou/OpNode.html"}, " object for the newly created node in the script, ", {"type": "code", "text": ["kwargs[\"node\"]"]}, ". See ", {"scheme": null, "value": "#node_event_kwargs", "type": "link", "text": ["script variables"], "fullpath": "/hom/locations.html#node_event_kwargs", "fragment": "#node_event_kwargs"}, " above for information on the items available in the dictionary."], "extent": [22202, 22505]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [22505, 22511], "body": [{"type": "para", "indent": 4, "text": ["Houdini will also find files matching ", {"type": "code", "text": ["HOUDINI_PATH/scripts/", {"type": "var", "text": ["category"]}, "/", {"type": "var", "text": ["nodename"]}, ".py"]}, " (no event suffix, for example ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/scripts/obj/geo.py"]}, "). This is a factory node\u2019s ", {"type": "q", "text": ["creation script"]}, ", which is (confusingly) not the same as a node\u2019s ", {"type": "code", "text": ["OnCreated"]}, " handler."], "extent": [22511, 22795]}, {"type": "para", "indent": 4, "text": ["Old documentation or tutorials may refer to this type of file as a way to run code when a node is created. However, this does not work with digital assets. ", {"type": "strong", "text": ["You should now use an OnCreated event script instead"]}, ". Consider the ", {"type": "q", "text": ["creation script"]}, " an internal implementation detail subject to change without notice."], "extent": [22795, 23112]}], "container": true}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": "node_instance_events", "container": true, "type": "h", "indent": 0, "text": ["Individual node event handlers"], "extent": [23112, 23172], "body": [{"type": "para", "indent": 0, "text": ["You can set up event handlers on ", {"type": "em", "text": ["individual node instances"]}, ". Unlike ", {"scheme": null, "value": "#asset_events", "type": "link", "text": ["asset events"], "fullpath": "/hom/locations.html#asset_events", "fragment": "#asset_events"}, ", which trigger when the event happens for ", {"type": "em", "text": ["any instance of the asset"]}, ", these handlers only run when an event happens to the ", {"type": "em", "text": ["specific node"]}, " you set them up on."], "extent": [23172, 23432]}, {"type": "para", "indent": 0, "text": ["See ", {"scheme": "Hom", "value": "/hom/hou/OpNode#addEventCallback", "type": "link", "text": "", "fallback_text": "hou.OpNode.addEventCallback", "fullpath": "/hom/hou/OpNode.html#addEventCallback", "fragment": "#addEventCallback"}, " for how to set up an event handler on a node. See ", {"scheme": "Hom", "value": "/hom/hou/nodeEventType", "type": "link", "text": "", "fallback_text": "hou.nodeEventType", "fullpath": "/hom/hou/nodeEventType.html"}, " for the types of events you can react to."], "extent": [23432, 23588]}]}, {"level": 2, "id": "general_asset_events", "container": true, "type": "h", "indent": 0, "text": ["General asset event handlers"], "extent": [23588, 23646], "body": [{"type": "para", "indent": 0, "text": ["You can set up handlers for changes to ", {"type": "em", "text": ["asset libraries"]}, ". For example, when an asset is created or deleted, or an asset library is installed or uninstalled."], "extent": [23646, 23805]}, {"type": "para", "indent": 0, "text": ["See ", {"scheme": "Hom", "value": "/hom/hou/hda#addEventCallback", "type": "link", "text": "", "fallback_text": "hou.hda.addEventCallback", "fullpath": "/hom/hou/hda.html#addEventCallback", "fragment": "#addEventCallback"}, " for how to set up an asset library event handler. See ", {"scheme": "Hom", "value": "/hom/hou/hdaEventType", "type": "link", "text": "", "fallback_text": "hou.hdaEventType", "fullpath": "/hom/hou/hdaEventType.html"}, " for the types of events you can react to."], "extent": [23805, 23961]}]}, {"level": 2, "id": "tool_script", "container": true, "type": "h", "indent": 0, "text": ["Shelf tool scripts"], "extent": [23961, 24000], "body": [{"type": "para", "indent": 0, "text": ["You write the script that runs when the user clicks a shelf tool in Python. See ", {"scheme": null, "value": "tool_script", "type": "link", "text": ["how to write a tool script"], "fullpath": "/hom/tool_script.html"}, " for more information."], "extent": [24000, 24146]}]}, {"level": 2, "id": "parameter_callback_scripts", "container": true, "type": "h", "indent": 0, "text": ["Parameter callback scripts"], "extent": [24146, 24208], "body": [{"type": "para", "indent": 0, "text": ["You can write Python scripts that are called whenever the value of a parameter on a node changes."], "extent": [24226, 24325]}, {"type": "para", "indent": 0, "text": [{"type": "strong", "text": ["If the default callback language is ", {"scheme": "Smallicon", "value": "BUTTONS/hscript", "type": "link", "text": "", "fullpath": "/hom/BUTTONS/hscript.html"}, " HScript, remember to change it to ", {"scheme": "Smallicon", "value": "MISC/python", "type": "link", "text": "", "fullpath": "/hom/MISC/python.html"}, " Python"]}, "."], "extent": [24325, 24458]}, {"type": "para", "indent": 0, "text": ["The event script can access the event parameters in a global dictionary variable called ", {"type": "code", "text": ["kwargs"]}, ". For example, to get the ", {"scheme": "Hom", "value": "/hom/hou/OpNode", "type": "link", "text": "", "fallback_text": "hou.OpNode", "fullpath": "/hom/hou/OpNode.html"}, " object containing the parameter, use ", {"type": "code", "text": ["kwargs[\"node\"]"]}, ", and to get the ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm.html"}, " object of the parameter, use ", {"type": "code", "text": ["kwargs[\"parm\"]"]}, "."], "extent": [24458, 24730]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [24730, 24735], "body": [{"type": "para", "indent": 4, "text": ["The most convenient way to implement a callback script is to write one line of Python that calls the ", {"type": "q", "text": ["real"]}, " callback function in your ", {"scheme": null, "value": "/hom/locations#asset_modules", "type": "link", "text": ["asset\u2019s Python module"], "fullpath": "/hom/locations.html#asset_modules", "fragment": "#asset_modules"}, " and passes it the ", {"type": "code", "text": ["kwargs"]}, " dictionary."], "extent": [24735, 24966]}, {"type": "para", "indent": 4, "text": ["For example, you can make a ", {"type": "code", "text": ["my_callback"]}, " function in the asset module that takes the dictionary of options and a ", {"type": "code", "text": ["hou.OpNode"]}, " object representing the current node instance. Then set the parameter\u2019s Python ", {"type": "ui", "text": ["Callback"]}, " line to call the function from the module using the following:"], "extent": [24966, 25253]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    hou.pwd().hm().my_callback(kwargs, hou.pwd())\n    "], "extent": [25253, 25332]}, {"type": "para", "indent": 4, "text": ["(", {"scheme": "Hom", "value": "/hom/hou/pwd", "type": "link", "text": "", "fallback_text": "hou.pwd", "fullpath": "/hom/hou/pwd.html"}, " returns the node which is currently cooking. ", {"scheme": "Hom", "value": "/hom/hou/OpNode#hm", "type": "link", "text": "", "fallback_text": "hou.OpNode.hm", "fullpath": "/hom/hou/OpNode.html#hm", "fragment": "#hm"}, " returns an asset\u2019s Python module.)"], "extent": [25332, 25453]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["The following table lists the contents of the ", {"type": "code", "text": ["kwargs"]}, " dictionary for parameter callbacks:"], "extent": [25453, 25545]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["parm"]}, " "], "role": "td", "extent": [25545, 25554], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm.html"}, " object whose callback script was invoked."], "extent": [25554, 25624]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["node"]}, " "], "role": "td", "extent": [25624, 25633], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The ", {"scheme": "Hom", "value": "/hom/hou/OpNode", "type": "link", "text": "", "fallback_text": "hou.OpNode", "fullpath": "/hom/hou/OpNode.html"}, " object containing the parameter."], "extent": [25633, 25696]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["parm_name"]}, " "], "role": "td", "extent": [25696, 25710], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The name of the ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm.html"}, ".  This value is the same as ", {"type": "code", "text": ["kwargs['parm'].name()"]}, "."], "extent": [25710, 25803]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["script_parm"]}, " "], "role": "td", "extent": [25803, 25819], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The name of the ", {"scheme": "Hom", "value": "/hom/hou/ParmTuple", "type": "link", "text": "", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple.html"}, " containing the parameter.  This is the same as ", {"type": "code", "text": ["kwargs['parm'].tuple().name()"]}, ". This key is ", {"type": "code", "text": ["script_parm"]}, " instead of something more meaningful for backwards compatibility with Hscript."], "extent": [25819, 26049]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["script_value"]}, " "], "role": "td", "extent": [26049, 26066], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The value of the parameter.  This entry is the same as ", {"type": "code", "text": ["kwargs['parm'].eval()"]}, "."], "extent": [26066, 26155]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["script_value0"]}, ", ", {"type": "code", "text": ["script_value1"]}, ", \u2026 "], "role": "td", "extent": [26155, 26195], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The values of the parameter tuple.  These entries are the same as ", {"type": "code", "text": ["[p.eval() for p in kwargs['parm'].tuple()]"]}, "."], "extent": [26195, 26316]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["script_multiparm_index"]}, " "], "role": "td", "extent": [26316, 26343], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The number of the multiparm, if the parameter is an instance of a multiparm (otherwise ", {"type": "code", "text": ["-1"]}, ").  Note that the ", {"type": "q", "text": ["First Instance"]}, " parameter on the multiparm\u2019s folder block list determines where to start numbering multiparms. Typically, the first multiparm is numbered 1, the second 2, and so on."], "extent": [26343, 26640]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["script_multiparm_nesting"]}, " "], "role": "td", "extent": [26640, 26669], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["If this parameter is not an instance of a multiparm, this value is ", {"type": "code", "text": ["0"]}, ". If it is a multiparm instance but the instance is not contained inside other multiparm instances, the value is ", {"type": "code", "text": ["1"]}, ".  Otherwise, if the multiparm instance is nested inside one level of multiparm instances it returns\n    the number of nesting levels."], "extent": [26669, 26995]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["script_multiparm_index2"]}, ", \u2026, ", {"type": "code", "text": ["script_multiparm_indexN"]}, " "], "role": "td", "extent": [26995, 27055], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["These values are only available if ", {"type": "code", "text": ["script_multiparm_nesting"]}, " is 2 or higher.  These values correspond to the multiparm instance numbers of the outer multiparm instances.  For example, if multiparm instance 3 is nested inside instance 5 which is inside instance 4, ", {"type": "code", "text": ["script_multiparm_index"]}, " will be 3, ", {"type": "code", "text": ["script_multiparm_index2"]}, " will be 5, and ", {"type": "code", "text": ["script_multiparm_index3"]}, " will be 4."], "extent": [27055, 27440]}]}], "divider": false}]}], "attrs": {"index": "document"}}, {"level": 2, "id": "parameter_menu_scripts", "container": true, "type": "h", "indent": 0, "text": ["Parameter menu scripts"], "extent": [27440, 27494], "body": [{"type": "para", "indent": 0, "text": ["You can use Python to generate dynamic parameter menus."], "extent": [27512, 27569]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [27569, 27574], "body": [{"type": "para", "indent": 4, "text": ["Houdini runs this script whenever the user opens the menu, and when the parameter is evaluated, so make it as simple and fast as possible."], "extent": [27574, 27718]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["If a Python menu script contains only one line, Houdini evaluates it as a Python expression. If it contains multiple lines, Houdini evaluates it as a function body and you must use ", {"type": "code", "text": ["return"]}, " to return the list. This behavior is the same as for Python parameter expressions."], "extent": [27718, 27992]}, {"type": "para", "indent": 0, "text": ["The script must return a flat list of strings, where the even items are tokens and the odd items are labels. For example:"], "extent": [27992, 28115]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\n[\"1\", \"Light\", \"50\", \"Medium\", \"100\", \"Heavy\"]\n"], "extent": [28115, 28179]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [28179, 28185], "body": [{"type": "para", "indent": 4, "text": ["You're probably used to working with pairs of values in Python using tuples, like this:"], "extent": [28185, 28278]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    pairs = [(\"1\", \"Light\"), (\"50\", \"Medium\"), (\"100\", \"Heavy\")]\n    "], "extent": [28278, 28372]}, {"type": "para", "indent": 4, "text": ["You can work that way when generating and working with the list, and then convert to the ", {"type": "q", "text": ["flat"]}, " list Houdini requires at the end using this trick:"], "extent": [28372, 28525]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    return [item for sublist in pairs for item in sublist]\n    # -> [\"1\", \"Light\", \"50\", \"Medium\", \"100\", \"Heavy\"]\n    "], "extent": [28525, 28669]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["For example, to generate a menu of Object-level digital assets using Python:"], "extent": [28669, 28748]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\nresult = []\nfor tool in hou.shelves.tools().values():\n    node_type_name = tool.toolMenuOpType(hou.paneTabType.NetworkEditor)\n    if (node_type_name.startswith(\"Object/\") and\n            'Digital Assets' in tool.toolMenuLocations()):\n        result.append(tool.name())\n        result.append(tool.label())\nreturn result\n"], "extent": [28748, 29084]}, {"type": "para", "indent": 0, "text": ["In an asset, you can put the code that generates the menu into a function in the asset\u2019s ", {"type": "code", "text": ["PythonModule"]}, " section (for example, a ", {"type": "code", "text": ["generate_menu"]}, " function) and call that function in the menu script ", {"type": "code", "text": ["hou.pwd().hdaModule().generate_menu()"]}, "."], "extent": [29084, 29323]}, {"type": "para", "indent": 0, "text": ["The menu script can access the calling parameter in a global dictionary variable called ", {"type": "code", "text": ["kwargs"]}, ". For example, to get the ", {"scheme": "Hom", "value": "/hom/hou/OpNode", "type": "link", "text": "", "fallback_text": "hou.OpNode", "fullpath": "/hom/hou/OpNode.html"}, " object containing the parameter, use ", {"type": "code", "text": ["kwargs[\"node\"]"]}, ", and to get the ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm.html"}, " object of the parameter, use ", {"type": "code", "text": ["kwargs[\"parm\"]"]}, "."], "extent": [29323, 29595]}, {"type": "para", "indent": 0, "text": ["The following table lists the contents of the ", {"type": "code", "text": ["kwargs"]}, " dictionary for parameter callbacks:"], "extent": [29595, 29687]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["parm"]}, " "], "role": "td", "extent": [29687, 29696], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm.html"}, " object whose callback script was invoked."], "extent": [29696, 29766]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["node"]}, " "], "role": "td", "extent": [29766, 29775], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The ", {"scheme": "Hom", "value": "/hom/hou/OpNode", "type": "link", "text": "", "fallback_text": "hou.OpNode", "fullpath": "/hom/hou/OpNode.html"}, " object containing the parameter."], "extent": [29775, 29838]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["script_multiparm_index"]}, " "], "role": "td", "extent": [29838, 29865], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["The number of the multiparm, if the parameter is an instance of a multiparm (otherwise ", {"type": "code", "text": ["-1"]}, ").  Note that the ", {"type": "q", "text": ["First Instance"]}, " parameter on the multiparm\u2019s folder block list determines where to start numbering multiparms. Typically, the first multiparm is numbered 1, the second 2, and so on."], "extent": [29865, 30162]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["script_multiparm_nesting"]}, " "], "role": "td", "extent": [30162, 30191], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["If this parameter is not an instance of a multiparm, this value is ", {"type": "code", "text": ["0"]}, ". If it is a multiparm instance but the instance is not contained inside other multiparm instances, the value is ", {"type": "code", "text": ["1"]}, ".  Otherwise, if the multiparm instance is nested inside one level of multiparm instances it returns\n    the number of nesting levels."], "extent": [30191, 30517]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["script_multiparm_index2"]}, ", \u2026, ", {"type": "code", "text": ["script_multiparm_indexN"]}, " "], "role": "td", "extent": [30517, 30577], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["These values are only available if ", {"type": "code", "text": ["script_multiparm_nesting"]}, " is 2 or higher.  These values correspond to the multiparm instance numbers of the outer multiparm instances.  For example, if multiparm instance 3 is nested inside instance 5 which is inside instance 4, ", {"type": "code", "text": ["script_multiparm_index"]}, " will be 3, ", {"type": "code", "text": ["script_multiparm_index2"]}, " will be 5, and ", {"type": "code", "text": ["script_multiparm_index3"]}, " will be 4."], "extent": [30577, 30962]}]}], "divider": false}]}], "attrs": {"index": "document"}}, {"level": 2, "id": "button_strip_scripts", "container": true, "type": "h", "indent": 0, "text": ["Scripting button/icon strip parameters"], "extent": [30962, 31030], "body": [{"type": "para", "indent": 0, "text": ["You can create ", {"type": "q", "text": ["button strip"]}, " and ", {"type": "q", "text": ["icon strip"]}, " parameters (either ", {"scheme": null, "value": "/ref/windows/optype", "type": "link", "text": ["on an asset"], "fullpath": "/ref/windows/optype.html"}, " or as ", {"scheme": null, "value": "/network/spare", "type": "link", "text": ["spare parameters"], "fullpath": "/network/spare.html"}, "). You can use these to provide a strip of clickable action buttons, or a strip of mutually exclusive options you can select from, or a strip of independent options you can individually turn on or off."], "extent": [31030, 31373]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["When you create a strip parameter, you set whether it is ", {"type": "q", "text": ["Normal"]}, " (mutually exclusive: only one item can be selected at a time) or ", {"type": "q", "text": ["Toggle"]}, " (each item can be turned on or off individually)."], "extent": [31373, 31566]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Reading the value of a ", {"type": "q", "text": ["Normal"]}, " strip is straightforward. ", {"scheme": "Hom", "value": "/hom/hou/Parm#eval", "type": "link", "text": "", "fallback_text": "hou.Parm.eval", "fullpath": "/hom/hou/Parm.html#eval", "fragment": "#eval"}, " will return the index of the selected item (starting from 0)."], "extent": [31566, 31709], "body": [{"type": "para", "indent": 4, "text": ["To translate the index into the corresponding token you set up for each item in the menu, you can get the list of tokens from the parameter template and then index into that list:"], "extent": [31709, 31898]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    def get_selected_token(parm):\n        # Read which item is currently selected\n        selected = parm.eval()\n        \n        # Get the list of menu tokens from the parameter template\n        tokens = parm.parmTemplate().menuItems()\n        \n        # Return the token corresponding to the selected item\n        return tokens[selected]\n\n    # In a parameter callback script...\n    token = get_selected_token(kwargs[\"parm\"])\n    "], "extent": [31898, 32355]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Reading the value of a ", {"type": "q", "text": ["Toggle"]}, " strip returns a ", {"scheme": "Wp", "value": "http://en.wikipedia.org/wiki/Bit_field", "type": "link", "text": ["bit field"], "exists": true}, ". This is a number where each ", {"type": "q", "text": ["bit"]}, " in the number\u2019s binary representation encodes the on/off state of a button in the strip."], "extent": [32355, 32556], "body": [{"type": "para", "indent": 4, "text": ["If you're not a hardcore programmer that probably sounds very technical, but all you need are some utility functions like the ones below to translate a bit field into a more usable form."], "extent": [32556, 32752]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    # The general form to test if the \"bit\" at position n is \"on\"\n    # in a number is:\n    # number & (1 << n)\n    \n    def strip_to_tokens(parm):\n        # Takes a reference to a button/icon strip parameter\n        # instance and returns a list of tokens corresponding\n        # to the buttons that are on\n        \n        bitfield = parm.eval()\n        tokens = parm.parmTemplate().menuItems()\n        return [token for n, token in enumerate(tokens) if bitfield & (1 << n)]\n    \n    def is_n_selected(bitfield, n):\n        # Returns True if the nth position (starting at zero)\n        # is \"on\" in the bitfield\n        \n        return bitfield & (1 << n)\n    \n    def bitfield_to_list(bitfield, size=32):\n        # Takes a bitfield and returns a list of booleans\n        # (True or False) indicating whether each position\n        # is \"on\" or \"off\" in the bitfield.\n        # (\"size\" is the number of buttons in the strip.)\n        \n        return [bitfield & (1 << n) for n in range(size)]\n    "], "extent": [32752, 33775]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Working with the value of a ", {"type": "q", "text": ["toggle"]}, " strip in an expression would be extremely difficult. If for some reason you need the settings of a toggle strip to drive an expression, a workaround would be give the strip a callback script that sets a simple value on a hidden parameter based on the strip settings. Then reference the hidden parameter in the expression instead of the strip."], "extent": [33775, 34159]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["To make a button/icon strip that acts more like a toolbar of action items, make a ", {"type": "q", "text": ["Toggle"]}, " strip, then give it a callback script that reads which item was turned on, performs some action based on that, ", {"type": "em", "text": ["and then immediately turns the option off again"]}, "."], "extent": [34159, 34415], "body": [{"type": "para", "indent": 4, "text": ["For example:"], "extent": [34415, 34433]}, {"lang": null, "type": "pre", "indent": 4, "text": ["\n    import math\n    \n    # A button strip callback strip that makes the buttons act like\n    # action buttons. This script assumes the menu type is set to \"Toggle\". \n    \n    # Read which button was turned on\n    parm = kwargs[\"parm\"]\n    bitfield = parm.eval()\n    # Only one item in the bitfield should be selected, so the base-2\n    # log of the bitfield should give us the index of the selected button\n    selected_index = int(math.log(bitfield, 2))\n    \n    # Do something here based on which button was clicked\n    \n    # Clear the selected button. Setting the parameter's bitfield value\n    # to zero turns off every button.\n    parm.set(0)\n    "], "extent": [34433, 35097]}], "container": true}], "container": true}]}, {"level": 2, "id": "keyvalue_button_scripts", "container": true, "type": "h", "indent": 0, "text": ["Key-value parameter button scripts"], "extent": [35097, 35166], "body": [{"type": "para", "indent": 0, "text": ["You can use Python to generate a new key-value pair for a key-value parameter when the user clicks a button. This script can present an interface for the user to choose a preset (for example, using ", {"scheme": "Hom", "value": "/hom/hou/ui#selectFromList", "type": "link", "text": "", "fallback_text": "hou.ui.selectFromList", "fullpath": "/hom/hou/ui.html#selectFromList", "fragment": "#selectFromList"}, " or ", {"scheme": "Hom", "value": "/hom/hou/ui#selectFromTree", "type": "link", "text": "", "fallback_text": "hou.ui.selectFromTree", "fullpath": "/hom/hou/ui.html#selectFromTree", "fragment": "#selectFromTree"}, "). It must return a ", {"type": "code", "text": ["(key, value)"]}, " tuple."], "extent": [35166, 35466]}, {"type": "para", "indent": 0, "text": ["If the value in the field is one line, it is treated as a Python expression and evaluated. If it has more than one line, it is treated as if it was the body of a function and must use a ", {"type": "code", "text": ["return"]}, " statement at the end to return a value. This is consistent with other parameter callbacks."], "extent": [35466, 35753]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["The script can return return non-string values in the tuple. Houdini will convert them to strings."], "extent": [35753, 35859]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The script runs in an environment containing a ", {"type": "code", "text": ["kwargs"]}, " global dictionary variable. ", {"type": "code", "text": ["kwargs[\"node\"]"]}, " contains a ", {"scheme": "Hom", "value": "/hom/hou/OpNode", "type": "link", "text": "", "fallback_text": "hou.OpNode", "fullpath": "/hom/hou/OpNode.html"}, " for the node. ", {"type": "code", "text": ["kwargs[\"parm\"]"]}, " contains a ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm.html"}, " reference for the key-value parameter."], "extent": [35859, 36087]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If the user cancels choosing, the script should return empty strings in the tuple ", {"type": "code", "text": ["(\"\", \"\")"]}, "."], "extent": [36087, 36184]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["We recommend you define a function to handle the callback in the ", {"scheme": null, "value": "/hom/locations#asset_modules", "type": "link", "text": ["asset\u2019s Python module"], "fullpath": "/hom/locations.html#asset_modules", "fragment": "#asset_modules"}, "."], "extent": [36184, 36306], "body": [{"type": "para", "indent": 4, "text": ["For example, you can put this function in the asset\u2019s Python module:"], "extent": [36306, 36380]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    def choose_env_variable():\n        \"\"\"\n        Lets the user choose an environment variable name and returns\n        the name and value to the key-value parameter.\n        \"\"\"\n    \n        # Grab the environment variable dictionary from the OS\n        import os\n        names = os.environ.keys()\n        # Use a Houdini UI function to ask the user to choose from the list\n        results = hou.ui.selectFromList(names)\n        if not results:\n            # The user didn't choose anything\n            return (\"\", \"\")\n        # We only support choosing one item; if the user picked more than\n        # one item, just use the first\n        chosen_index = results[0]\n        # hou.ui.selectFromList() returns the number of the chosen item;\n        # translate that back into a name\n        chosen_name = names[chosen_index]\n        # Return a tuple of the variable name and the value of that variable\n        return (chosen_name, os.environ[chosen_name])\n    "], "extent": [36380, 37365]}, {"type": "para", "indent": 4, "text": ["Then you could call it using this in the ", {"type": "ui", "text": ["Chooser callback"]}, " field:"], "extent": [37365, 37448]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    kwargs[\"node\"].hdaModule().choose_env_variable()\n    "], "extent": [37448, 37530]}, {"type": "para", "indent": 4, "text": ["If the callback function needs the node and/or parameter reference, you can pass them to the function:"], "extent": [37530, 37647]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    kwargs[\"node\"].hm().choose_env_variable(kwargs[\"node\"], kwargs[\"parm\"])\n    "], "extent": [37647, 37752]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Note that the callback does not ", {"type": "em", "text": ["need"]}, " to interactively ask the user to choose something. You could have a button that adds a key-value pair based on current conditions."], "extent": [37752, 37926], "body": [{"type": "para", "indent": 4, "text": ["For example, you could put this in the ", {"type": "ui", "text": ["Chooser callback"]}, " field:"], "extent": [37926, 38002]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    (hou.frame(), hou.time())\n    "], "extent": [38002, 38061]}, {"type": "para", "indent": 4, "text": ["When a user clicked the button, this Python expression would evaluate to a tuple containing the current frame number and current time."], "extent": [38061, 38203]}], "container": true}], "container": true}]}, {"level": 2, "id": "background", "container": true, "type": "h", "indent": 0, "text": ["Background processes"], "extent": [38203, 38243], "body": [{"type": "para", "indent": 0, "text": ["You can set up Python code to execute ", {"type": "q", "text": ["in the background"]}, " while the user is working."], "extent": [38243, 38330]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can use ", {"scheme": "Hom", "value": "/hom/hou/ui#addEventLoopCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addEventLoopCallback", "fullpath": "/hom/hou/ui.html#addEventLoopCallback", "fragment": "#addEventLoopCallback"}, " to set up a function that Houdini calls whenever the UI is not busy."], "extent": [38330, 38448], "body": [{"type": "para", "indent": 4, "text": ["The callback function will be called ", {"type": "em", "text": ["very often"]}, " (around 20 times a second). The function should be very fast to run so it doesn\u2019t slow down the UI."], "extent": [38448, 38603]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can use a Qt ", {"type": "code", "text": ["QTimer"]}, " object to schedule code to run in the future. That code can itself set up another ", {"type": "code", "text": ["QTimer"]}, " if you want some code to execute at a certain interval."], "extent": [38603, 38780]}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [38780, 38791], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can use ", {"scheme": "Hom", "value": "/hom/hou/findFile", "type": "link", "text": "", "fallback_text": "hou.findFile", "fullpath": "/hom/hou/findFile.html"}, " to search for filenames in the Houdini path."], "extent": [38791, 38871]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["To read content from an embedded file inside an asset, use ", {"scheme": "Hom", "value": "/hom/hou/HDADefinition#sections", "type": "link", "text": "", "fallback_text": "hou.HDADefinition.sections", "fullpath": "/hom/hou/HDADefinition.html#sections", "fragment": "#sections"}, " to get a dictionary of section names to ", {"type": "code", "text": ["HDASection"]}, " objects, then use ", {"scheme": "Hom", "value": "/hom/hou/HDASection#contents", "type": "link", "text": "", "fallback_text": "hou.HDASection.contents", "fullpath": "/hom/hou/HDASection.html#contents", "fragment": "#contents"}, " to get the section contents."], "extent": [38871, 39096], "body": [{"type": "para", "indent": 4, "text": ["For example, to read the contents of an embedded file named ", {"type": "code", "text": ["example"]}, " in the ", {"type": "code", "text": ["my_asset"]}, " object:"], "extent": [39096, 39197]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    objects = hou.nodeTypeCategories()[\"Object\"]\n    my_asset = objects.nodeTypes()[\"my_asset\"]\n    my_asset_def = my_asset.definition()\n    section = my_asset_def.sections()[\"example\"]\n    contents = section.contents()\n    "], "extent": [39197, 39446]}, {"type": "para", "indent": 4, "text": ["As a shortcut, you can use Houdini\u2019s support for reading asset sections as if they were files using an ", {"type": "code", "text": ["opdef:"]}, " path:"], "extent": [39446, 39578]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    content = hou.readFile(\"opdef:Object/my_asset?example\")\n    "], "extent": [39578, 39667]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["To access Python variables in the global scope from ", {"type": "code", "text": ["hou.session"]}, ", import ", {"type": "code", "text": ["__main__"]}, ".  For example, if ", {"type": "code", "text": ["x"]}, " is a variable in the global scope, you can access it as ", {"type": "code", "text": ["__main__.x"]}, "."], "extent": [39667, 39848], "body": [{"type": "para", "indent": 4, "text": ["You can use this approach to access Python global variables from parameter expressions, HDA Python modules, Python button callbacks, shelf scripts, and so on."], "extent": [39848, 40013]}], "container": true}], "container": true}]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [40013, 40022], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/basics/houdinipath", "type": "link", "text": ["The Houdini path"], "fullpath": "/basics/houdinipath.html"}], "extent": [40022, 40064]}], "container": true}], "text": "Related"}], "title": [{"type": "supertitle", "text": ["Python"]}, " script locations"], "summary": ["Various places in Houdini where you can customize behavior using Python scripting."]}